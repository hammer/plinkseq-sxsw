// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variant.proto

#ifndef PROTOBUF_variant_2eproto__INCLUDED
#define PROTOBUF_variant_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_variant_2eproto();
void protobuf_AssignDesc_variant_2eproto();
void protobuf_ShutdownFile_variant_2eproto();

class VariantMetaUnit;
class GenotypeMetaUnit;
class VariantBuffer;
class VariantMetaBuffer;
class GenotypeBuffer;
class GenotypeMetaBuffer;

enum VariantMetaUnit_Type {
  VariantMetaUnit_Type_INT = 1,
  VariantMetaUnit_Type_FLOAT = 2,
  VariantMetaUnit_Type_TEXT = 3,
  VariantMetaUnit_Type_BOOL = 4
};
bool VariantMetaUnit_Type_IsValid(int value);
const VariantMetaUnit_Type VariantMetaUnit_Type_Type_MIN = VariantMetaUnit_Type_INT;
const VariantMetaUnit_Type VariantMetaUnit_Type_Type_MAX = VariantMetaUnit_Type_BOOL;
const int VariantMetaUnit_Type_Type_ARRAYSIZE = VariantMetaUnit_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* VariantMetaUnit_Type_descriptor();
inline const ::std::string& VariantMetaUnit_Type_Name(VariantMetaUnit_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    VariantMetaUnit_Type_descriptor(), value);
}
inline bool VariantMetaUnit_Type_Parse(
    const ::std::string& name, VariantMetaUnit_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VariantMetaUnit_Type>(
    VariantMetaUnit_Type_descriptor(), name, value);
}
enum GenotypeMetaUnit_Type {
  GenotypeMetaUnit_Type_INT = 1,
  GenotypeMetaUnit_Type_FLOAT = 2,
  GenotypeMetaUnit_Type_TEXT = 3,
  GenotypeMetaUnit_Type_BOOL = 4
};
bool GenotypeMetaUnit_Type_IsValid(int value);
const GenotypeMetaUnit_Type GenotypeMetaUnit_Type_Type_MIN = GenotypeMetaUnit_Type_INT;
const GenotypeMetaUnit_Type GenotypeMetaUnit_Type_Type_MAX = GenotypeMetaUnit_Type_BOOL;
const int GenotypeMetaUnit_Type_Type_ARRAYSIZE = GenotypeMetaUnit_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GenotypeMetaUnit_Type_descriptor();
inline const ::std::string& GenotypeMetaUnit_Type_Name(GenotypeMetaUnit_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GenotypeMetaUnit_Type_descriptor(), value);
}
inline bool GenotypeMetaUnit_Type_Parse(
    const ::std::string& name, GenotypeMetaUnit_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GenotypeMetaUnit_Type>(
    GenotypeMetaUnit_Type_descriptor(), name, value);
}
// ===================================================================

class VariantMetaUnit : public ::google::protobuf::Message {
 public:
  VariantMetaUnit();
  virtual ~VariantMetaUnit();
  
  VariantMetaUnit(const VariantMetaUnit& from);
  
  inline VariantMetaUnit& operator=(const VariantMetaUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VariantMetaUnit& default_instance();
  
  void Swap(VariantMetaUnit* other);
  
  // implements Message ----------------------------------------------
  
  VariantMetaUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariantMetaUnit& from);
  void MergeFrom(const VariantMetaUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef VariantMetaUnit_Type Type;
  static const Type INT = VariantMetaUnit_Type_INT;
  static const Type FLOAT = VariantMetaUnit_Type_FLOAT;
  static const Type TEXT = VariantMetaUnit_Type_TEXT;
  static const Type BOOL = VariantMetaUnit_Type_BOOL;
  static inline bool Type_IsValid(int value) {
    return VariantMetaUnit_Type_IsValid(value);
  }
  static const Type Type_MIN =
    VariantMetaUnit_Type_Type_MIN;
  static const Type Type_MAX =
    VariantMetaUnit_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    VariantMetaUnit_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return VariantMetaUnit_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return VariantMetaUnit_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return VariantMetaUnit_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .VariantMetaUnit.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::VariantMetaUnit_Type type() const;
  inline void set_type(::VariantMetaUnit_Type value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated int32 int_value = 3 [packed = true];
  inline int int_value_size() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 3;
  inline ::google::protobuf::int32 int_value(int index) const;
  inline void set_int_value(int index, ::google::protobuf::int32 value);
  inline void add_int_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_value();
  
  // repeated double double_value = 4 [packed = true];
  inline int double_value_size() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  inline double double_value(int index) const;
  inline void set_double_value(int index, double value);
  inline void add_double_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_value();
  
  // repeated string string_value = 5;
  inline int string_value_size() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  inline const ::std::string& string_value(int index) const;
  inline ::std::string* mutable_string_value(int index);
  inline void set_string_value(int index, const ::std::string& value);
  inline void set_string_value(int index, const char* value);
  inline void set_string_value(int index, const char* value, size_t size);
  inline ::std::string* add_string_value();
  inline void add_string_value(const ::std::string& value);
  inline void add_string_value(const char* value);
  inline void add_string_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();
  
  // repeated bool bool_value = 6 [packed = true];
  inline int bool_value_size() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 6;
  inline bool bool_value(int index) const;
  inline void set_bool_value(int index, bool value);
  inline void add_bool_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bool_value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bool_value();
  
  // @@protoc_insertion_point(class_scope:VariantMetaUnit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_value_;
  mutable int _int_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  mutable int _double_value_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  ::google::protobuf::RepeatedField< bool > bool_value_;
  mutable int _bool_value_cached_byte_size_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VariantMetaUnit* default_instance_;
};
// -------------------------------------------------------------------

class GenotypeMetaUnit : public ::google::protobuf::Message {
 public:
  GenotypeMetaUnit();
  virtual ~GenotypeMetaUnit();
  
  GenotypeMetaUnit(const GenotypeMetaUnit& from);
  
  inline GenotypeMetaUnit& operator=(const GenotypeMetaUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenotypeMetaUnit& default_instance();
  
  void Swap(GenotypeMetaUnit* other);
  
  // implements Message ----------------------------------------------
  
  GenotypeMetaUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenotypeMetaUnit& from);
  void MergeFrom(const GenotypeMetaUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GenotypeMetaUnit_Type Type;
  static const Type INT = GenotypeMetaUnit_Type_INT;
  static const Type FLOAT = GenotypeMetaUnit_Type_FLOAT;
  static const Type TEXT = GenotypeMetaUnit_Type_TEXT;
  static const Type BOOL = GenotypeMetaUnit_Type_BOOL;
  static inline bool Type_IsValid(int value) {
    return GenotypeMetaUnit_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GenotypeMetaUnit_Type_Type_MIN;
  static const Type Type_MAX =
    GenotypeMetaUnit_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GenotypeMetaUnit_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GenotypeMetaUnit_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GenotypeMetaUnit_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GenotypeMetaUnit_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .GenotypeMetaUnit.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::GenotypeMetaUnit_Type type() const;
  inline void set_type(::GenotypeMetaUnit_Type value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 fixed_len = 3;
  inline bool has_fixed_len() const;
  inline void clear_fixed_len();
  static const int kFixedLenFieldNumber = 3;
  inline ::google::protobuf::int32 fixed_len() const;
  inline void set_fixed_len(::google::protobuf::int32 value);
  
  // repeated int32 len = 4 [packed = true];
  inline int len_size() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::int32 len(int index) const;
  inline void set_len(int index, ::google::protobuf::int32 value);
  inline void add_len(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      len() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_len();
  
  // repeated int32 int_value = 5 [packed = true];
  inline int int_value_size() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 5;
  inline ::google::protobuf::int32 int_value(int index) const;
  inline void set_int_value(int index, ::google::protobuf::int32 value);
  inline void add_int_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_value();
  
  // repeated double double_value = 6 [packed = true];
  inline int double_value_size() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 6;
  inline double double_value(int index) const;
  inline void set_double_value(int index, double value);
  inline void add_double_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_value();
  
  // repeated string string_value = 7;
  inline int string_value_size() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 7;
  inline const ::std::string& string_value(int index) const;
  inline ::std::string* mutable_string_value(int index);
  inline void set_string_value(int index, const ::std::string& value);
  inline void set_string_value(int index, const char* value);
  inline void set_string_value(int index, const char* value, size_t size);
  inline ::std::string* add_string_value();
  inline void add_string_value(const ::std::string& value);
  inline void add_string_value(const char* value);
  inline void add_string_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();
  
  // repeated bool bool_value = 8 [packed = true];
  inline int bool_value_size() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 8;
  inline bool bool_value(int index) const;
  inline void set_bool_value(int index, bool value);
  inline void add_bool_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bool_value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bool_value();
  
  // optional int32 fixed_indiv = 9;
  inline bool has_fixed_indiv() const;
  inline void clear_fixed_indiv();
  static const int kFixedIndivFieldNumber = 9;
  inline ::google::protobuf::int32 fixed_indiv() const;
  inline void set_fixed_indiv(::google::protobuf::int32 value);
  
  // repeated int32 indiv_index = 10 [packed = true];
  inline int indiv_index_size() const;
  inline void clear_indiv_index();
  static const int kIndivIndexFieldNumber = 10;
  inline ::google::protobuf::int32 indiv_index(int index) const;
  inline void set_indiv_index(int index, ::google::protobuf::int32 value);
  inline void add_indiv_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indiv_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indiv_index();
  
  // repeated int32 missing_index = 11 [packed = true];
  inline int missing_index_size() const;
  inline void clear_missing_index();
  static const int kMissingIndexFieldNumber = 11;
  inline ::google::protobuf::int32 missing_index(int index) const;
  inline void set_missing_index(int index, ::google::protobuf::int32 value);
  inline void add_missing_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      missing_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_missing_index();
  
  // @@protoc_insertion_point(class_scope:GenotypeMetaUnit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 fixed_len_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > len_;
  mutable int _len_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_value_;
  mutable int _int_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  mutable int _double_value_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  ::google::protobuf::RepeatedField< bool > bool_value_;
  mutable int _bool_value_cached_byte_size_;
  ::google::protobuf::int32 fixed_indiv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indiv_index_;
  mutable int _indiv_index_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > missing_index_;
  mutable int _missing_index_cached_byte_size_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GenotypeMetaUnit* default_instance_;
};
// -------------------------------------------------------------------

class VariantBuffer : public ::google::protobuf::Message {
 public:
  VariantBuffer();
  virtual ~VariantBuffer();
  
  VariantBuffer(const VariantBuffer& from);
  
  inline VariantBuffer& operator=(const VariantBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VariantBuffer& default_instance();
  
  void Swap(VariantBuffer* other);
  
  // implements Message ----------------------------------------------
  
  VariantBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariantBuffer& from);
  void MergeFrom(const VariantBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ref = 1;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 1;
  inline const ::std::string& ref() const;
  inline void set_ref(const ::std::string& value);
  inline void set_ref(const char* value);
  inline void set_ref(const char* value, size_t size);
  inline ::std::string* mutable_ref();
  
  // optional string alt = 2;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 2;
  inline const ::std::string& alt() const;
  inline void set_alt(const ::std::string& value);
  inline void set_alt(const char* value);
  inline void set_alt(const char* value, size_t size);
  inline ::std::string* mutable_alt();
  
  // optional double quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline double quality() const;
  inline void set_quality(double value);
  
  // repeated string filter = 4;
  inline int filter_size() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 4;
  inline const ::std::string& filter(int index) const;
  inline ::std::string* mutable_filter(int index);
  inline void set_filter(int index, const ::std::string& value);
  inline void set_filter(int index, const char* value);
  inline void set_filter(int index, const char* value, size_t size);
  inline ::std::string* add_filter();
  inline void add_filter(const ::std::string& value);
  inline void add_filter(const char* value);
  inline void add_filter(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& filter() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filter();
  
  // @@protoc_insertion_point(class_scope:VariantBuffer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* ref_;
  static const ::std::string _default_ref_;
  ::std::string* alt_;
  static const ::std::string _default_alt_;
  double quality_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filter_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VariantBuffer* default_instance_;
};
// -------------------------------------------------------------------

class VariantMetaBuffer : public ::google::protobuf::Message {
 public:
  VariantMetaBuffer();
  virtual ~VariantMetaBuffer();
  
  VariantMetaBuffer(const VariantMetaBuffer& from);
  
  inline VariantMetaBuffer& operator=(const VariantMetaBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VariantMetaBuffer& default_instance();
  
  void Swap(VariantMetaBuffer* other);
  
  // implements Message ----------------------------------------------
  
  VariantMetaBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariantMetaBuffer& from);
  void MergeFrom(const VariantMetaBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .VariantMetaUnit vmeta = 1;
  inline int vmeta_size() const;
  inline void clear_vmeta();
  static const int kVmetaFieldNumber = 1;
  inline const ::VariantMetaUnit& vmeta(int index) const;
  inline ::VariantMetaUnit* mutable_vmeta(int index);
  inline ::VariantMetaUnit* add_vmeta();
  inline const ::google::protobuf::RepeatedPtrField< ::VariantMetaUnit >&
      vmeta() const;
  inline ::google::protobuf::RepeatedPtrField< ::VariantMetaUnit >*
      mutable_vmeta();
  
  // @@protoc_insertion_point(class_scope:VariantMetaBuffer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::VariantMetaUnit > vmeta_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VariantMetaBuffer* default_instance_;
};
// -------------------------------------------------------------------

class GenotypeBuffer : public ::google::protobuf::Message {
 public:
  GenotypeBuffer();
  virtual ~GenotypeBuffer();
  
  GenotypeBuffer(const GenotypeBuffer& from);
  
  inline GenotypeBuffer& operator=(const GenotypeBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenotypeBuffer& default_instance();
  
  void Swap(GenotypeBuffer* other);
  
  // implements Message ----------------------------------------------
  
  GenotypeBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenotypeBuffer& from);
  void MergeFrom(const GenotypeBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 geno = 1 [packed = true];
  inline int geno_size() const;
  inline void clear_geno();
  static const int kGenoFieldNumber = 1;
  inline ::google::protobuf::uint32 geno(int index) const;
  inline void set_geno(int index, ::google::protobuf::uint32 value);
  inline void add_geno(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      geno() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_geno();
  
  // @@protoc_insertion_point(class_scope:GenotypeBuffer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > geno_;
  mutable int _geno_cached_byte_size_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GenotypeBuffer* default_instance_;
};
// -------------------------------------------------------------------

class GenotypeMetaBuffer : public ::google::protobuf::Message {
 public:
  GenotypeMetaBuffer();
  virtual ~GenotypeMetaBuffer();
  
  GenotypeMetaBuffer(const GenotypeMetaBuffer& from);
  
  inline GenotypeMetaBuffer& operator=(const GenotypeMetaBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenotypeMetaBuffer& default_instance();
  
  void Swap(GenotypeMetaBuffer* other);
  
  // implements Message ----------------------------------------------
  
  GenotypeMetaBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenotypeMetaBuffer& from);
  void MergeFrom(const GenotypeMetaBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GenotypeMetaUnit gmeta = 1;
  inline int gmeta_size() const;
  inline void clear_gmeta();
  static const int kGmetaFieldNumber = 1;
  inline const ::GenotypeMetaUnit& gmeta(int index) const;
  inline ::GenotypeMetaUnit* mutable_gmeta(int index);
  inline ::GenotypeMetaUnit* add_gmeta();
  inline const ::google::protobuf::RepeatedPtrField< ::GenotypeMetaUnit >&
      gmeta() const;
  inline ::google::protobuf::RepeatedPtrField< ::GenotypeMetaUnit >*
      mutable_gmeta();
  
  // @@protoc_insertion_point(class_scope:GenotypeMetaBuffer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::GenotypeMetaUnit > gmeta_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GenotypeMetaBuffer* default_instance_;
};
// ===================================================================


// ===================================================================

// VariantMetaUnit

// required .VariantMetaUnit.Type type = 1;
inline bool VariantMetaUnit::has_type() const {
  return _has_bit(0);
}
inline void VariantMetaUnit::clear_type() {
  type_ = 1;
  _clear_bit(0);
}
inline ::VariantMetaUnit_Type VariantMetaUnit::type() const {
  return static_cast< ::VariantMetaUnit_Type >(type_);
}
inline void VariantMetaUnit::set_type(::VariantMetaUnit_Type value) {
  GOOGLE_DCHECK(::VariantMetaUnit_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// required string name = 2;
inline bool VariantMetaUnit::has_name() const {
  return _has_bit(1);
}
inline void VariantMetaUnit::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& VariantMetaUnit::name() const {
  return *name_;
}
inline void VariantMetaUnit::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VariantMetaUnit::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VariantMetaUnit::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantMetaUnit::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated int32 int_value = 3 [packed = true];
inline int VariantMetaUnit::int_value_size() const {
  return int_value_.size();
}
inline void VariantMetaUnit::clear_int_value() {
  int_value_.Clear();
}
inline ::google::protobuf::int32 VariantMetaUnit::int_value(int index) const {
  return int_value_.Get(index);
}
inline void VariantMetaUnit::set_int_value(int index, ::google::protobuf::int32 value) {
  int_value_.Set(index, value);
}
inline void VariantMetaUnit::add_int_value(::google::protobuf::int32 value) {
  int_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VariantMetaUnit::int_value() const {
  return int_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VariantMetaUnit::mutable_int_value() {
  return &int_value_;
}

// repeated double double_value = 4 [packed = true];
inline int VariantMetaUnit::double_value_size() const {
  return double_value_.size();
}
inline void VariantMetaUnit::clear_double_value() {
  double_value_.Clear();
}
inline double VariantMetaUnit::double_value(int index) const {
  return double_value_.Get(index);
}
inline void VariantMetaUnit::set_double_value(int index, double value) {
  double_value_.Set(index, value);
}
inline void VariantMetaUnit::add_double_value(double value) {
  double_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
VariantMetaUnit::double_value() const {
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
VariantMetaUnit::mutable_double_value() {
  return &double_value_;
}

// repeated string string_value = 5;
inline int VariantMetaUnit::string_value_size() const {
  return string_value_.size();
}
inline void VariantMetaUnit::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& VariantMetaUnit::string_value(int index) const {
  return string_value_.Get(index);
}
inline ::std::string* VariantMetaUnit::mutable_string_value(int index) {
  return string_value_.Mutable(index);
}
inline void VariantMetaUnit::set_string_value(int index, const ::std::string& value) {
  string_value_.Mutable(index)->assign(value);
}
inline void VariantMetaUnit::set_string_value(int index, const char* value) {
  string_value_.Mutable(index)->assign(value);
}
inline void VariantMetaUnit::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantMetaUnit::add_string_value() {
  return string_value_.Add();
}
inline void VariantMetaUnit::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
}
inline void VariantMetaUnit::add_string_value(const char* value) {
  string_value_.Add()->assign(value);
}
inline void VariantMetaUnit::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VariantMetaUnit::string_value() const {
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VariantMetaUnit::mutable_string_value() {
  return &string_value_;
}

// repeated bool bool_value = 6 [packed = true];
inline int VariantMetaUnit::bool_value_size() const {
  return bool_value_.size();
}
inline void VariantMetaUnit::clear_bool_value() {
  bool_value_.Clear();
}
inline bool VariantMetaUnit::bool_value(int index) const {
  return bool_value_.Get(index);
}
inline void VariantMetaUnit::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
}
inline void VariantMetaUnit::add_bool_value(bool value) {
  bool_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
VariantMetaUnit::bool_value() const {
  return bool_value_;
}
inline ::google::protobuf::RepeatedField< bool >*
VariantMetaUnit::mutable_bool_value() {
  return &bool_value_;
}

// -------------------------------------------------------------------

// GenotypeMetaUnit

// required .GenotypeMetaUnit.Type type = 1;
inline bool GenotypeMetaUnit::has_type() const {
  return _has_bit(0);
}
inline void GenotypeMetaUnit::clear_type() {
  type_ = 1;
  _clear_bit(0);
}
inline ::GenotypeMetaUnit_Type GenotypeMetaUnit::type() const {
  return static_cast< ::GenotypeMetaUnit_Type >(type_);
}
inline void GenotypeMetaUnit::set_type(::GenotypeMetaUnit_Type value) {
  GOOGLE_DCHECK(::GenotypeMetaUnit_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// required string name = 2;
inline bool GenotypeMetaUnit::has_name() const {
  return _has_bit(1);
}
inline void GenotypeMetaUnit::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GenotypeMetaUnit::name() const {
  return *name_;
}
inline void GenotypeMetaUnit::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GenotypeMetaUnit::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GenotypeMetaUnit::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenotypeMetaUnit::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 fixed_len = 3;
inline bool GenotypeMetaUnit::has_fixed_len() const {
  return _has_bit(2);
}
inline void GenotypeMetaUnit::clear_fixed_len() {
  fixed_len_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GenotypeMetaUnit::fixed_len() const {
  return fixed_len_;
}
inline void GenotypeMetaUnit::set_fixed_len(::google::protobuf::int32 value) {
  _set_bit(2);
  fixed_len_ = value;
}

// repeated int32 len = 4 [packed = true];
inline int GenotypeMetaUnit::len_size() const {
  return len_.size();
}
inline void GenotypeMetaUnit::clear_len() {
  len_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaUnit::len(int index) const {
  return len_.Get(index);
}
inline void GenotypeMetaUnit::set_len(int index, ::google::protobuf::int32 value) {
  len_.Set(index, value);
}
inline void GenotypeMetaUnit::add_len(::google::protobuf::int32 value) {
  len_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaUnit::len() const {
  return len_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaUnit::mutable_len() {
  return &len_;
}

// repeated int32 int_value = 5 [packed = true];
inline int GenotypeMetaUnit::int_value_size() const {
  return int_value_.size();
}
inline void GenotypeMetaUnit::clear_int_value() {
  int_value_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaUnit::int_value(int index) const {
  return int_value_.Get(index);
}
inline void GenotypeMetaUnit::set_int_value(int index, ::google::protobuf::int32 value) {
  int_value_.Set(index, value);
}
inline void GenotypeMetaUnit::add_int_value(::google::protobuf::int32 value) {
  int_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaUnit::int_value() const {
  return int_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaUnit::mutable_int_value() {
  return &int_value_;
}

// repeated double double_value = 6 [packed = true];
inline int GenotypeMetaUnit::double_value_size() const {
  return double_value_.size();
}
inline void GenotypeMetaUnit::clear_double_value() {
  double_value_.Clear();
}
inline double GenotypeMetaUnit::double_value(int index) const {
  return double_value_.Get(index);
}
inline void GenotypeMetaUnit::set_double_value(int index, double value) {
  double_value_.Set(index, value);
}
inline void GenotypeMetaUnit::add_double_value(double value) {
  double_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
GenotypeMetaUnit::double_value() const {
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
GenotypeMetaUnit::mutable_double_value() {
  return &double_value_;
}

// repeated string string_value = 7;
inline int GenotypeMetaUnit::string_value_size() const {
  return string_value_.size();
}
inline void GenotypeMetaUnit::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& GenotypeMetaUnit::string_value(int index) const {
  return string_value_.Get(index);
}
inline ::std::string* GenotypeMetaUnit::mutable_string_value(int index) {
  return string_value_.Mutable(index);
}
inline void GenotypeMetaUnit::set_string_value(int index, const ::std::string& value) {
  string_value_.Mutable(index)->assign(value);
}
inline void GenotypeMetaUnit::set_string_value(int index, const char* value) {
  string_value_.Mutable(index)->assign(value);
}
inline void GenotypeMetaUnit::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenotypeMetaUnit::add_string_value() {
  return string_value_.Add();
}
inline void GenotypeMetaUnit::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
}
inline void GenotypeMetaUnit::add_string_value(const char* value) {
  string_value_.Add()->assign(value);
}
inline void GenotypeMetaUnit::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GenotypeMetaUnit::string_value() const {
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GenotypeMetaUnit::mutable_string_value() {
  return &string_value_;
}

// repeated bool bool_value = 8 [packed = true];
inline int GenotypeMetaUnit::bool_value_size() const {
  return bool_value_.size();
}
inline void GenotypeMetaUnit::clear_bool_value() {
  bool_value_.Clear();
}
inline bool GenotypeMetaUnit::bool_value(int index) const {
  return bool_value_.Get(index);
}
inline void GenotypeMetaUnit::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
}
inline void GenotypeMetaUnit::add_bool_value(bool value) {
  bool_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GenotypeMetaUnit::bool_value() const {
  return bool_value_;
}
inline ::google::protobuf::RepeatedField< bool >*
GenotypeMetaUnit::mutable_bool_value() {
  return &bool_value_;
}

// optional int32 fixed_indiv = 9;
inline bool GenotypeMetaUnit::has_fixed_indiv() const {
  return _has_bit(8);
}
inline void GenotypeMetaUnit::clear_fixed_indiv() {
  fixed_indiv_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 GenotypeMetaUnit::fixed_indiv() const {
  return fixed_indiv_;
}
inline void GenotypeMetaUnit::set_fixed_indiv(::google::protobuf::int32 value) {
  _set_bit(8);
  fixed_indiv_ = value;
}

// repeated int32 indiv_index = 10 [packed = true];
inline int GenotypeMetaUnit::indiv_index_size() const {
  return indiv_index_.size();
}
inline void GenotypeMetaUnit::clear_indiv_index() {
  indiv_index_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaUnit::indiv_index(int index) const {
  return indiv_index_.Get(index);
}
inline void GenotypeMetaUnit::set_indiv_index(int index, ::google::protobuf::int32 value) {
  indiv_index_.Set(index, value);
}
inline void GenotypeMetaUnit::add_indiv_index(::google::protobuf::int32 value) {
  indiv_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaUnit::indiv_index() const {
  return indiv_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaUnit::mutable_indiv_index() {
  return &indiv_index_;
}

// repeated int32 missing_index = 11 [packed = true];
inline int GenotypeMetaUnit::missing_index_size() const {
  return missing_index_.size();
}
inline void GenotypeMetaUnit::clear_missing_index() {
  missing_index_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaUnit::missing_index(int index) const {
  return missing_index_.Get(index);
}
inline void GenotypeMetaUnit::set_missing_index(int index, ::google::protobuf::int32 value) {
  missing_index_.Set(index, value);
}
inline void GenotypeMetaUnit::add_missing_index(::google::protobuf::int32 value) {
  missing_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaUnit::missing_index() const {
  return missing_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaUnit::mutable_missing_index() {
  return &missing_index_;
}

// -------------------------------------------------------------------

// VariantBuffer

// optional string ref = 1;
inline bool VariantBuffer::has_ref() const {
  return _has_bit(0);
}
inline void VariantBuffer::clear_ref() {
  if (ref_ != &_default_ref_) {
    ref_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& VariantBuffer::ref() const {
  return *ref_;
}
inline void VariantBuffer::set_ref(const ::std::string& value) {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void VariantBuffer::set_ref(const char* value) {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void VariantBuffer::set_ref(const char* value, size_t size) {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantBuffer::mutable_ref() {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  return ref_;
}

// optional string alt = 2;
inline bool VariantBuffer::has_alt() const {
  return _has_bit(1);
}
inline void VariantBuffer::clear_alt() {
  if (alt_ != &_default_alt_) {
    alt_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& VariantBuffer::alt() const {
  return *alt_;
}
inline void VariantBuffer::set_alt(const ::std::string& value) {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  alt_->assign(value);
}
inline void VariantBuffer::set_alt(const char* value) {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  alt_->assign(value);
}
inline void VariantBuffer::set_alt(const char* value, size_t size) {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  alt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantBuffer::mutable_alt() {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  return alt_;
}

// optional double quality = 3;
inline bool VariantBuffer::has_quality() const {
  return _has_bit(2);
}
inline void VariantBuffer::clear_quality() {
  quality_ = 0;
  _clear_bit(2);
}
inline double VariantBuffer::quality() const {
  return quality_;
}
inline void VariantBuffer::set_quality(double value) {
  _set_bit(2);
  quality_ = value;
}

// repeated string filter = 4;
inline int VariantBuffer::filter_size() const {
  return filter_.size();
}
inline void VariantBuffer::clear_filter() {
  filter_.Clear();
}
inline const ::std::string& VariantBuffer::filter(int index) const {
  return filter_.Get(index);
}
inline ::std::string* VariantBuffer::mutable_filter(int index) {
  return filter_.Mutable(index);
}
inline void VariantBuffer::set_filter(int index, const ::std::string& value) {
  filter_.Mutable(index)->assign(value);
}
inline void VariantBuffer::set_filter(int index, const char* value) {
  filter_.Mutable(index)->assign(value);
}
inline void VariantBuffer::set_filter(int index, const char* value, size_t size) {
  filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantBuffer::add_filter() {
  return filter_.Add();
}
inline void VariantBuffer::add_filter(const ::std::string& value) {
  filter_.Add()->assign(value);
}
inline void VariantBuffer::add_filter(const char* value) {
  filter_.Add()->assign(value);
}
inline void VariantBuffer::add_filter(const char* value, size_t size) {
  filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VariantBuffer::filter() const {
  return filter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VariantBuffer::mutable_filter() {
  return &filter_;
}

// -------------------------------------------------------------------

// VariantMetaBuffer

// repeated .VariantMetaUnit vmeta = 1;
inline int VariantMetaBuffer::vmeta_size() const {
  return vmeta_.size();
}
inline void VariantMetaBuffer::clear_vmeta() {
  vmeta_.Clear();
}
inline const ::VariantMetaUnit& VariantMetaBuffer::vmeta(int index) const {
  return vmeta_.Get(index);
}
inline ::VariantMetaUnit* VariantMetaBuffer::mutable_vmeta(int index) {
  return vmeta_.Mutable(index);
}
inline ::VariantMetaUnit* VariantMetaBuffer::add_vmeta() {
  return vmeta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VariantMetaUnit >&
VariantMetaBuffer::vmeta() const {
  return vmeta_;
}
inline ::google::protobuf::RepeatedPtrField< ::VariantMetaUnit >*
VariantMetaBuffer::mutable_vmeta() {
  return &vmeta_;
}

// -------------------------------------------------------------------

// GenotypeBuffer

// repeated uint32 geno = 1 [packed = true];
inline int GenotypeBuffer::geno_size() const {
  return geno_.size();
}
inline void GenotypeBuffer::clear_geno() {
  geno_.Clear();
}
inline ::google::protobuf::uint32 GenotypeBuffer::geno(int index) const {
  return geno_.Get(index);
}
inline void GenotypeBuffer::set_geno(int index, ::google::protobuf::uint32 value) {
  geno_.Set(index, value);
}
inline void GenotypeBuffer::add_geno(::google::protobuf::uint32 value) {
  geno_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GenotypeBuffer::geno() const {
  return geno_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GenotypeBuffer::mutable_geno() {
  return &geno_;
}

// -------------------------------------------------------------------

// GenotypeMetaBuffer

// repeated .GenotypeMetaUnit gmeta = 1;
inline int GenotypeMetaBuffer::gmeta_size() const {
  return gmeta_.size();
}
inline void GenotypeMetaBuffer::clear_gmeta() {
  gmeta_.Clear();
}
inline const ::GenotypeMetaUnit& GenotypeMetaBuffer::gmeta(int index) const {
  return gmeta_.Get(index);
}
inline ::GenotypeMetaUnit* GenotypeMetaBuffer::mutable_gmeta(int index) {
  return gmeta_.Mutable(index);
}
inline ::GenotypeMetaUnit* GenotypeMetaBuffer::add_gmeta() {
  return gmeta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GenotypeMetaUnit >&
GenotypeMetaBuffer::gmeta() const {
  return gmeta_;
}
inline ::google::protobuf::RepeatedPtrField< ::GenotypeMetaUnit >*
GenotypeMetaBuffer::mutable_gmeta() {
  return &gmeta_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VariantMetaUnit_Type>() {
  return ::VariantMetaUnit_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GenotypeMetaUnit_Type>() {
  return ::GenotypeMetaUnit_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_variant_2eproto__INCLUDED
