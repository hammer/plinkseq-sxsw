// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variant.proto

#ifndef PROTOBUF_variant_2eproto__INCLUDED
#define PROTOBUF_variant_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_variant_2eproto();
void protobuf_AssignDesc_variant_2eproto();
void protobuf_ShutdownFile_variant_2eproto();

class VarMetaBuffer;
class GenotypeMetaBuffer;
class VariantBuffer;

enum VarMetaBuffer_Type {
  VarMetaBuffer_Type_INT = 1,
  VarMetaBuffer_Type_FLOAT = 2,
  VarMetaBuffer_Type_TEXT = 3,
  VarMetaBuffer_Type_BOOL = 4
};
bool VarMetaBuffer_Type_IsValid(int value);
const VarMetaBuffer_Type VarMetaBuffer_Type_Type_MIN = VarMetaBuffer_Type_INT;
const VarMetaBuffer_Type VarMetaBuffer_Type_Type_MAX = VarMetaBuffer_Type_BOOL;
const int VarMetaBuffer_Type_Type_ARRAYSIZE = VarMetaBuffer_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* VarMetaBuffer_Type_descriptor();
inline const ::std::string& VarMetaBuffer_Type_Name(VarMetaBuffer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    VarMetaBuffer_Type_descriptor(), value);
}
inline bool VarMetaBuffer_Type_Parse(
    const ::std::string& name, VarMetaBuffer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VarMetaBuffer_Type>(
    VarMetaBuffer_Type_descriptor(), name, value);
}
enum GenotypeMetaBuffer_Type {
  GenotypeMetaBuffer_Type_INT = 1,
  GenotypeMetaBuffer_Type_FLOAT = 2,
  GenotypeMetaBuffer_Type_TEXT = 3,
  GenotypeMetaBuffer_Type_BOOL = 4
};
bool GenotypeMetaBuffer_Type_IsValid(int value);
const GenotypeMetaBuffer_Type GenotypeMetaBuffer_Type_Type_MIN = GenotypeMetaBuffer_Type_INT;
const GenotypeMetaBuffer_Type GenotypeMetaBuffer_Type_Type_MAX = GenotypeMetaBuffer_Type_BOOL;
const int GenotypeMetaBuffer_Type_Type_ARRAYSIZE = GenotypeMetaBuffer_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GenotypeMetaBuffer_Type_descriptor();
inline const ::std::string& GenotypeMetaBuffer_Type_Name(GenotypeMetaBuffer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GenotypeMetaBuffer_Type_descriptor(), value);
}
inline bool GenotypeMetaBuffer_Type_Parse(
    const ::std::string& name, GenotypeMetaBuffer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GenotypeMetaBuffer_Type>(
    GenotypeMetaBuffer_Type_descriptor(), name, value);
}
// ===================================================================

class VarMetaBuffer : public ::google::protobuf::Message {
 public:
  VarMetaBuffer();
  virtual ~VarMetaBuffer();
  
  VarMetaBuffer(const VarMetaBuffer& from);
  
  inline VarMetaBuffer& operator=(const VarMetaBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VarMetaBuffer& default_instance();
  
  void Swap(VarMetaBuffer* other);
  
  // implements Message ----------------------------------------------
  
  VarMetaBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VarMetaBuffer& from);
  void MergeFrom(const VarMetaBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef VarMetaBuffer_Type Type;
  static const Type INT = VarMetaBuffer_Type_INT;
  static const Type FLOAT = VarMetaBuffer_Type_FLOAT;
  static const Type TEXT = VarMetaBuffer_Type_TEXT;
  static const Type BOOL = VarMetaBuffer_Type_BOOL;
  static inline bool Type_IsValid(int value) {
    return VarMetaBuffer_Type_IsValid(value);
  }
  static const Type Type_MIN =
    VarMetaBuffer_Type_Type_MIN;
  static const Type Type_MAX =
    VarMetaBuffer_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    VarMetaBuffer_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return VarMetaBuffer_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return VarMetaBuffer_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return VarMetaBuffer_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .VarMetaBuffer.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::VarMetaBuffer_Type type() const;
  inline void set_type(::VarMetaBuffer_Type value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated int32 int_value = 3 [packed = true];
  inline int int_value_size() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 3;
  inline ::google::protobuf::int32 int_value(int index) const;
  inline void set_int_value(int index, ::google::protobuf::int32 value);
  inline void add_int_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_value();
  
  // repeated double double_value = 4 [packed = true];
  inline int double_value_size() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  inline double double_value(int index) const;
  inline void set_double_value(int index, double value);
  inline void add_double_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_value();
  
  // repeated string string_value = 5;
  inline int string_value_size() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  inline const ::std::string& string_value(int index) const;
  inline ::std::string* mutable_string_value(int index);
  inline void set_string_value(int index, const ::std::string& value);
  inline void set_string_value(int index, const char* value);
  inline void set_string_value(int index, const char* value, size_t size);
  inline ::std::string* add_string_value();
  inline void add_string_value(const ::std::string& value);
  inline void add_string_value(const char* value);
  inline void add_string_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();
  
  // repeated bool bool_value = 6 [packed = true];
  inline int bool_value_size() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 6;
  inline bool bool_value(int index) const;
  inline void set_bool_value(int index, bool value);
  inline void add_bool_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bool_value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bool_value();
  
  // @@protoc_insertion_point(class_scope:VarMetaBuffer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_value_;
  mutable int _int_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  mutable int _double_value_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  ::google::protobuf::RepeatedField< bool > bool_value_;
  mutable int _bool_value_cached_byte_size_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VarMetaBuffer* default_instance_;
};
// -------------------------------------------------------------------

class GenotypeMetaBuffer : public ::google::protobuf::Message {
 public:
  GenotypeMetaBuffer();
  virtual ~GenotypeMetaBuffer();
  
  GenotypeMetaBuffer(const GenotypeMetaBuffer& from);
  
  inline GenotypeMetaBuffer& operator=(const GenotypeMetaBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenotypeMetaBuffer& default_instance();
  
  void Swap(GenotypeMetaBuffer* other);
  
  // implements Message ----------------------------------------------
  
  GenotypeMetaBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenotypeMetaBuffer& from);
  void MergeFrom(const GenotypeMetaBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GenotypeMetaBuffer_Type Type;
  static const Type INT = GenotypeMetaBuffer_Type_INT;
  static const Type FLOAT = GenotypeMetaBuffer_Type_FLOAT;
  static const Type TEXT = GenotypeMetaBuffer_Type_TEXT;
  static const Type BOOL = GenotypeMetaBuffer_Type_BOOL;
  static inline bool Type_IsValid(int value) {
    return GenotypeMetaBuffer_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GenotypeMetaBuffer_Type_Type_MIN;
  static const Type Type_MAX =
    GenotypeMetaBuffer_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GenotypeMetaBuffer_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GenotypeMetaBuffer_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GenotypeMetaBuffer_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GenotypeMetaBuffer_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .GenotypeMetaBuffer.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::GenotypeMetaBuffer_Type type() const;
  inline void set_type(::GenotypeMetaBuffer_Type value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 fixed_len = 3;
  inline bool has_fixed_len() const;
  inline void clear_fixed_len();
  static const int kFixedLenFieldNumber = 3;
  inline ::google::protobuf::int32 fixed_len() const;
  inline void set_fixed_len(::google::protobuf::int32 value);
  
  // repeated int32 len = 4 [packed = true];
  inline int len_size() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::int32 len(int index) const;
  inline void set_len(int index, ::google::protobuf::int32 value);
  inline void add_len(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      len() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_len();
  
  // repeated int32 int_value = 5 [packed = true];
  inline int int_value_size() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 5;
  inline ::google::protobuf::int32 int_value(int index) const;
  inline void set_int_value(int index, ::google::protobuf::int32 value);
  inline void add_int_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_value();
  
  // repeated double double_value = 6 [packed = true];
  inline int double_value_size() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 6;
  inline double double_value(int index) const;
  inline void set_double_value(int index, double value);
  inline void add_double_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_value();
  
  // repeated string string_value = 7;
  inline int string_value_size() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 7;
  inline const ::std::string& string_value(int index) const;
  inline ::std::string* mutable_string_value(int index);
  inline void set_string_value(int index, const ::std::string& value);
  inline void set_string_value(int index, const char* value);
  inline void set_string_value(int index, const char* value, size_t size);
  inline ::std::string* add_string_value();
  inline void add_string_value(const ::std::string& value);
  inline void add_string_value(const char* value);
  inline void add_string_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_value();
  
  // repeated bool bool_value = 8 [packed = true];
  inline int bool_value_size() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 8;
  inline bool bool_value(int index) const;
  inline void set_bool_value(int index, bool value);
  inline void add_bool_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bool_value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bool_value();
  
  // optional int32 fixed_indiv = 9;
  inline bool has_fixed_indiv() const;
  inline void clear_fixed_indiv();
  static const int kFixedIndivFieldNumber = 9;
  inline ::google::protobuf::int32 fixed_indiv() const;
  inline void set_fixed_indiv(::google::protobuf::int32 value);
  
  // repeated int32 indiv_index = 10 [packed = true];
  inline int indiv_index_size() const;
  inline void clear_indiv_index();
  static const int kIndivIndexFieldNumber = 10;
  inline ::google::protobuf::int32 indiv_index(int index) const;
  inline void set_indiv_index(int index, ::google::protobuf::int32 value);
  inline void add_indiv_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indiv_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indiv_index();
  
  // repeated int32 missing_index = 11 [packed = true];
  inline int missing_index_size() const;
  inline void clear_missing_index();
  static const int kMissingIndexFieldNumber = 11;
  inline ::google::protobuf::int32 missing_index(int index) const;
  inline void set_missing_index(int index, ::google::protobuf::int32 value);
  inline void add_missing_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      missing_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_missing_index();
  
  // @@protoc_insertion_point(class_scope:GenotypeMetaBuffer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 fixed_len_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > len_;
  mutable int _len_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_value_;
  mutable int _int_value_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_value_;
  mutable int _double_value_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_value_;
  ::google::protobuf::RepeatedField< bool > bool_value_;
  mutable int _bool_value_cached_byte_size_;
  ::google::protobuf::int32 fixed_indiv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indiv_index_;
  mutable int _indiv_index_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > missing_index_;
  mutable int _missing_index_cached_byte_size_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GenotypeMetaBuffer* default_instance_;
};
// -------------------------------------------------------------------

class VariantBuffer : public ::google::protobuf::Message {
 public:
  VariantBuffer();
  virtual ~VariantBuffer();
  
  VariantBuffer(const VariantBuffer& from);
  
  inline VariantBuffer& operator=(const VariantBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VariantBuffer& default_instance();
  
  void Swap(VariantBuffer* other);
  
  // implements Message ----------------------------------------------
  
  VariantBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariantBuffer& from);
  void MergeFrom(const VariantBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ref = 1;
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 1;
  inline const ::std::string& ref() const;
  inline void set_ref(const ::std::string& value);
  inline void set_ref(const char* value);
  inline void set_ref(const char* value, size_t size);
  inline ::std::string* mutable_ref();
  
  // optional string alt = 2;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 2;
  inline const ::std::string& alt() const;
  inline void set_alt(const ::std::string& value);
  inline void set_alt(const char* value);
  inline void set_alt(const char* value, size_t size);
  inline ::std::string* mutable_alt();
  
  // optional string strand = 3;
  inline bool has_strand() const;
  inline void clear_strand();
  static const int kStrandFieldNumber = 3;
  inline const ::std::string& strand() const;
  inline void set_strand(const ::std::string& value);
  inline void set_strand(const char* value);
  inline void set_strand(const char* value, size_t size);
  inline ::std::string* mutable_strand();
  
  // optional double quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline double quality() const;
  inline void set_quality(double value);
  
  // repeated string filter = 5;
  inline int filter_size() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 5;
  inline const ::std::string& filter(int index) const;
  inline ::std::string* mutable_filter(int index);
  inline void set_filter(int index, const ::std::string& value);
  inline void set_filter(int index, const char* value);
  inline void set_filter(int index, const char* value, size_t size);
  inline ::std::string* add_filter();
  inline void add_filter(const ::std::string& value);
  inline void add_filter(const char* value);
  inline void add_filter(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& filter() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filter();
  
  // repeated .VarMetaBuffer vmeta = 6;
  inline int vmeta_size() const;
  inline void clear_vmeta();
  static const int kVmetaFieldNumber = 6;
  inline const ::VarMetaBuffer& vmeta(int index) const;
  inline ::VarMetaBuffer* mutable_vmeta(int index);
  inline ::VarMetaBuffer* add_vmeta();
  inline const ::google::protobuf::RepeatedPtrField< ::VarMetaBuffer >&
      vmeta() const;
  inline ::google::protobuf::RepeatedPtrField< ::VarMetaBuffer >*
      mutable_vmeta();
  
  // repeated int32 geno1 = 7 [packed = true];
  inline int geno1_size() const;
  inline void clear_geno1();
  static const int kGeno1FieldNumber = 7;
  inline ::google::protobuf::int32 geno1(int index) const;
  inline void set_geno1(int index, ::google::protobuf::int32 value);
  inline void add_geno1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      geno1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_geno1();
  
  // repeated int32 geno2 = 8 [packed = true];
  inline int geno2_size() const;
  inline void clear_geno2();
  static const int kGeno2FieldNumber = 8;
  inline ::google::protobuf::int32 geno2(int index) const;
  inline void set_geno2(int index, ::google::protobuf::int32 value);
  inline void add_geno2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      geno2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_geno2();
  
  // repeated .GenotypeMetaBuffer gmeta = 9;
  inline int gmeta_size() const;
  inline void clear_gmeta();
  static const int kGmetaFieldNumber = 9;
  inline const ::GenotypeMetaBuffer& gmeta(int index) const;
  inline ::GenotypeMetaBuffer* mutable_gmeta(int index);
  inline ::GenotypeMetaBuffer* add_gmeta();
  inline const ::google::protobuf::RepeatedPtrField< ::GenotypeMetaBuffer >&
      gmeta() const;
  inline ::google::protobuf::RepeatedPtrField< ::GenotypeMetaBuffer >*
      mutable_gmeta();
  
  // @@protoc_insertion_point(class_scope:VariantBuffer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* ref_;
  static const ::std::string _default_ref_;
  ::std::string* alt_;
  static const ::std::string _default_alt_;
  ::std::string* strand_;
  static const ::std::string _default_strand_;
  double quality_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filter_;
  ::google::protobuf::RepeatedPtrField< ::VarMetaBuffer > vmeta_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > geno1_;
  mutable int _geno1_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > geno2_;
  mutable int _geno2_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::GenotypeMetaBuffer > gmeta_;
  friend void  protobuf_AddDesc_variant_2eproto();
  friend void protobuf_AssignDesc_variant_2eproto();
  friend void protobuf_ShutdownFile_variant_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VariantBuffer* default_instance_;
};
// ===================================================================


// ===================================================================

// VarMetaBuffer

// required .VarMetaBuffer.Type type = 1;
inline bool VarMetaBuffer::has_type() const {
  return _has_bit(0);
}
inline void VarMetaBuffer::clear_type() {
  type_ = 1;
  _clear_bit(0);
}
inline ::VarMetaBuffer_Type VarMetaBuffer::type() const {
  return static_cast< ::VarMetaBuffer_Type >(type_);
}
inline void VarMetaBuffer::set_type(::VarMetaBuffer_Type value) {
  GOOGLE_DCHECK(::VarMetaBuffer_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// required string name = 2;
inline bool VarMetaBuffer::has_name() const {
  return _has_bit(1);
}
inline void VarMetaBuffer::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& VarMetaBuffer::name() const {
  return *name_;
}
inline void VarMetaBuffer::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VarMetaBuffer::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VarMetaBuffer::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VarMetaBuffer::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated int32 int_value = 3 [packed = true];
inline int VarMetaBuffer::int_value_size() const {
  return int_value_.size();
}
inline void VarMetaBuffer::clear_int_value() {
  int_value_.Clear();
}
inline ::google::protobuf::int32 VarMetaBuffer::int_value(int index) const {
  return int_value_.Get(index);
}
inline void VarMetaBuffer::set_int_value(int index, ::google::protobuf::int32 value) {
  int_value_.Set(index, value);
}
inline void VarMetaBuffer::add_int_value(::google::protobuf::int32 value) {
  int_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VarMetaBuffer::int_value() const {
  return int_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VarMetaBuffer::mutable_int_value() {
  return &int_value_;
}

// repeated double double_value = 4 [packed = true];
inline int VarMetaBuffer::double_value_size() const {
  return double_value_.size();
}
inline void VarMetaBuffer::clear_double_value() {
  double_value_.Clear();
}
inline double VarMetaBuffer::double_value(int index) const {
  return double_value_.Get(index);
}
inline void VarMetaBuffer::set_double_value(int index, double value) {
  double_value_.Set(index, value);
}
inline void VarMetaBuffer::add_double_value(double value) {
  double_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
VarMetaBuffer::double_value() const {
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
VarMetaBuffer::mutable_double_value() {
  return &double_value_;
}

// repeated string string_value = 5;
inline int VarMetaBuffer::string_value_size() const {
  return string_value_.size();
}
inline void VarMetaBuffer::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& VarMetaBuffer::string_value(int index) const {
  return string_value_.Get(index);
}
inline ::std::string* VarMetaBuffer::mutable_string_value(int index) {
  return string_value_.Mutable(index);
}
inline void VarMetaBuffer::set_string_value(int index, const ::std::string& value) {
  string_value_.Mutable(index)->assign(value);
}
inline void VarMetaBuffer::set_string_value(int index, const char* value) {
  string_value_.Mutable(index)->assign(value);
}
inline void VarMetaBuffer::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VarMetaBuffer::add_string_value() {
  return string_value_.Add();
}
inline void VarMetaBuffer::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
}
inline void VarMetaBuffer::add_string_value(const char* value) {
  string_value_.Add()->assign(value);
}
inline void VarMetaBuffer::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VarMetaBuffer::string_value() const {
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VarMetaBuffer::mutable_string_value() {
  return &string_value_;
}

// repeated bool bool_value = 6 [packed = true];
inline int VarMetaBuffer::bool_value_size() const {
  return bool_value_.size();
}
inline void VarMetaBuffer::clear_bool_value() {
  bool_value_.Clear();
}
inline bool VarMetaBuffer::bool_value(int index) const {
  return bool_value_.Get(index);
}
inline void VarMetaBuffer::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
}
inline void VarMetaBuffer::add_bool_value(bool value) {
  bool_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
VarMetaBuffer::bool_value() const {
  return bool_value_;
}
inline ::google::protobuf::RepeatedField< bool >*
VarMetaBuffer::mutable_bool_value() {
  return &bool_value_;
}

// -------------------------------------------------------------------

// GenotypeMetaBuffer

// required .GenotypeMetaBuffer.Type type = 1;
inline bool GenotypeMetaBuffer::has_type() const {
  return _has_bit(0);
}
inline void GenotypeMetaBuffer::clear_type() {
  type_ = 1;
  _clear_bit(0);
}
inline ::GenotypeMetaBuffer_Type GenotypeMetaBuffer::type() const {
  return static_cast< ::GenotypeMetaBuffer_Type >(type_);
}
inline void GenotypeMetaBuffer::set_type(::GenotypeMetaBuffer_Type value) {
  GOOGLE_DCHECK(::GenotypeMetaBuffer_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// required string name = 2;
inline bool GenotypeMetaBuffer::has_name() const {
  return _has_bit(1);
}
inline void GenotypeMetaBuffer::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GenotypeMetaBuffer::name() const {
  return *name_;
}
inline void GenotypeMetaBuffer::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GenotypeMetaBuffer::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GenotypeMetaBuffer::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenotypeMetaBuffer::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 fixed_len = 3;
inline bool GenotypeMetaBuffer::has_fixed_len() const {
  return _has_bit(2);
}
inline void GenotypeMetaBuffer::clear_fixed_len() {
  fixed_len_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 GenotypeMetaBuffer::fixed_len() const {
  return fixed_len_;
}
inline void GenotypeMetaBuffer::set_fixed_len(::google::protobuf::int32 value) {
  _set_bit(2);
  fixed_len_ = value;
}

// repeated int32 len = 4 [packed = true];
inline int GenotypeMetaBuffer::len_size() const {
  return len_.size();
}
inline void GenotypeMetaBuffer::clear_len() {
  len_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaBuffer::len(int index) const {
  return len_.Get(index);
}
inline void GenotypeMetaBuffer::set_len(int index, ::google::protobuf::int32 value) {
  len_.Set(index, value);
}
inline void GenotypeMetaBuffer::add_len(::google::protobuf::int32 value) {
  len_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaBuffer::len() const {
  return len_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaBuffer::mutable_len() {
  return &len_;
}

// repeated int32 int_value = 5 [packed = true];
inline int GenotypeMetaBuffer::int_value_size() const {
  return int_value_.size();
}
inline void GenotypeMetaBuffer::clear_int_value() {
  int_value_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaBuffer::int_value(int index) const {
  return int_value_.Get(index);
}
inline void GenotypeMetaBuffer::set_int_value(int index, ::google::protobuf::int32 value) {
  int_value_.Set(index, value);
}
inline void GenotypeMetaBuffer::add_int_value(::google::protobuf::int32 value) {
  int_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaBuffer::int_value() const {
  return int_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaBuffer::mutable_int_value() {
  return &int_value_;
}

// repeated double double_value = 6 [packed = true];
inline int GenotypeMetaBuffer::double_value_size() const {
  return double_value_.size();
}
inline void GenotypeMetaBuffer::clear_double_value() {
  double_value_.Clear();
}
inline double GenotypeMetaBuffer::double_value(int index) const {
  return double_value_.Get(index);
}
inline void GenotypeMetaBuffer::set_double_value(int index, double value) {
  double_value_.Set(index, value);
}
inline void GenotypeMetaBuffer::add_double_value(double value) {
  double_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
GenotypeMetaBuffer::double_value() const {
  return double_value_;
}
inline ::google::protobuf::RepeatedField< double >*
GenotypeMetaBuffer::mutable_double_value() {
  return &double_value_;
}

// repeated string string_value = 7;
inline int GenotypeMetaBuffer::string_value_size() const {
  return string_value_.size();
}
inline void GenotypeMetaBuffer::clear_string_value() {
  string_value_.Clear();
}
inline const ::std::string& GenotypeMetaBuffer::string_value(int index) const {
  return string_value_.Get(index);
}
inline ::std::string* GenotypeMetaBuffer::mutable_string_value(int index) {
  return string_value_.Mutable(index);
}
inline void GenotypeMetaBuffer::set_string_value(int index, const ::std::string& value) {
  string_value_.Mutable(index)->assign(value);
}
inline void GenotypeMetaBuffer::set_string_value(int index, const char* value) {
  string_value_.Mutable(index)->assign(value);
}
inline void GenotypeMetaBuffer::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenotypeMetaBuffer::add_string_value() {
  return string_value_.Add();
}
inline void GenotypeMetaBuffer::add_string_value(const ::std::string& value) {
  string_value_.Add()->assign(value);
}
inline void GenotypeMetaBuffer::add_string_value(const char* value) {
  string_value_.Add()->assign(value);
}
inline void GenotypeMetaBuffer::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GenotypeMetaBuffer::string_value() const {
  return string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GenotypeMetaBuffer::mutable_string_value() {
  return &string_value_;
}

// repeated bool bool_value = 8 [packed = true];
inline int GenotypeMetaBuffer::bool_value_size() const {
  return bool_value_.size();
}
inline void GenotypeMetaBuffer::clear_bool_value() {
  bool_value_.Clear();
}
inline bool GenotypeMetaBuffer::bool_value(int index) const {
  return bool_value_.Get(index);
}
inline void GenotypeMetaBuffer::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
}
inline void GenotypeMetaBuffer::add_bool_value(bool value) {
  bool_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GenotypeMetaBuffer::bool_value() const {
  return bool_value_;
}
inline ::google::protobuf::RepeatedField< bool >*
GenotypeMetaBuffer::mutable_bool_value() {
  return &bool_value_;
}

// optional int32 fixed_indiv = 9;
inline bool GenotypeMetaBuffer::has_fixed_indiv() const {
  return _has_bit(8);
}
inline void GenotypeMetaBuffer::clear_fixed_indiv() {
  fixed_indiv_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 GenotypeMetaBuffer::fixed_indiv() const {
  return fixed_indiv_;
}
inline void GenotypeMetaBuffer::set_fixed_indiv(::google::protobuf::int32 value) {
  _set_bit(8);
  fixed_indiv_ = value;
}

// repeated int32 indiv_index = 10 [packed = true];
inline int GenotypeMetaBuffer::indiv_index_size() const {
  return indiv_index_.size();
}
inline void GenotypeMetaBuffer::clear_indiv_index() {
  indiv_index_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaBuffer::indiv_index(int index) const {
  return indiv_index_.Get(index);
}
inline void GenotypeMetaBuffer::set_indiv_index(int index, ::google::protobuf::int32 value) {
  indiv_index_.Set(index, value);
}
inline void GenotypeMetaBuffer::add_indiv_index(::google::protobuf::int32 value) {
  indiv_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaBuffer::indiv_index() const {
  return indiv_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaBuffer::mutable_indiv_index() {
  return &indiv_index_;
}

// repeated int32 missing_index = 11 [packed = true];
inline int GenotypeMetaBuffer::missing_index_size() const {
  return missing_index_.size();
}
inline void GenotypeMetaBuffer::clear_missing_index() {
  missing_index_.Clear();
}
inline ::google::protobuf::int32 GenotypeMetaBuffer::missing_index(int index) const {
  return missing_index_.Get(index);
}
inline void GenotypeMetaBuffer::set_missing_index(int index, ::google::protobuf::int32 value) {
  missing_index_.Set(index, value);
}
inline void GenotypeMetaBuffer::add_missing_index(::google::protobuf::int32 value) {
  missing_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GenotypeMetaBuffer::missing_index() const {
  return missing_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GenotypeMetaBuffer::mutable_missing_index() {
  return &missing_index_;
}

// -------------------------------------------------------------------

// VariantBuffer

// optional string ref = 1;
inline bool VariantBuffer::has_ref() const {
  return _has_bit(0);
}
inline void VariantBuffer::clear_ref() {
  if (ref_ != &_default_ref_) {
    ref_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& VariantBuffer::ref() const {
  return *ref_;
}
inline void VariantBuffer::set_ref(const ::std::string& value) {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void VariantBuffer::set_ref(const char* value) {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  ref_->assign(value);
}
inline void VariantBuffer::set_ref(const char* value, size_t size) {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantBuffer::mutable_ref() {
  _set_bit(0);
  if (ref_ == &_default_ref_) {
    ref_ = new ::std::string;
  }
  return ref_;
}

// optional string alt = 2;
inline bool VariantBuffer::has_alt() const {
  return _has_bit(1);
}
inline void VariantBuffer::clear_alt() {
  if (alt_ != &_default_alt_) {
    alt_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& VariantBuffer::alt() const {
  return *alt_;
}
inline void VariantBuffer::set_alt(const ::std::string& value) {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  alt_->assign(value);
}
inline void VariantBuffer::set_alt(const char* value) {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  alt_->assign(value);
}
inline void VariantBuffer::set_alt(const char* value, size_t size) {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  alt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantBuffer::mutable_alt() {
  _set_bit(1);
  if (alt_ == &_default_alt_) {
    alt_ = new ::std::string;
  }
  return alt_;
}

// optional string strand = 3;
inline bool VariantBuffer::has_strand() const {
  return _has_bit(2);
}
inline void VariantBuffer::clear_strand() {
  if (strand_ != &_default_strand_) {
    strand_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& VariantBuffer::strand() const {
  return *strand_;
}
inline void VariantBuffer::set_strand(const ::std::string& value) {
  _set_bit(2);
  if (strand_ == &_default_strand_) {
    strand_ = new ::std::string;
  }
  strand_->assign(value);
}
inline void VariantBuffer::set_strand(const char* value) {
  _set_bit(2);
  if (strand_ == &_default_strand_) {
    strand_ = new ::std::string;
  }
  strand_->assign(value);
}
inline void VariantBuffer::set_strand(const char* value, size_t size) {
  _set_bit(2);
  if (strand_ == &_default_strand_) {
    strand_ = new ::std::string;
  }
  strand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantBuffer::mutable_strand() {
  _set_bit(2);
  if (strand_ == &_default_strand_) {
    strand_ = new ::std::string;
  }
  return strand_;
}

// optional double quality = 4;
inline bool VariantBuffer::has_quality() const {
  return _has_bit(3);
}
inline void VariantBuffer::clear_quality() {
  quality_ = 0;
  _clear_bit(3);
}
inline double VariantBuffer::quality() const {
  return quality_;
}
inline void VariantBuffer::set_quality(double value) {
  _set_bit(3);
  quality_ = value;
}

// repeated string filter = 5;
inline int VariantBuffer::filter_size() const {
  return filter_.size();
}
inline void VariantBuffer::clear_filter() {
  filter_.Clear();
}
inline const ::std::string& VariantBuffer::filter(int index) const {
  return filter_.Get(index);
}
inline ::std::string* VariantBuffer::mutable_filter(int index) {
  return filter_.Mutable(index);
}
inline void VariantBuffer::set_filter(int index, const ::std::string& value) {
  filter_.Mutable(index)->assign(value);
}
inline void VariantBuffer::set_filter(int index, const char* value) {
  filter_.Mutable(index)->assign(value);
}
inline void VariantBuffer::set_filter(int index, const char* value, size_t size) {
  filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VariantBuffer::add_filter() {
  return filter_.Add();
}
inline void VariantBuffer::add_filter(const ::std::string& value) {
  filter_.Add()->assign(value);
}
inline void VariantBuffer::add_filter(const char* value) {
  filter_.Add()->assign(value);
}
inline void VariantBuffer::add_filter(const char* value, size_t size) {
  filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VariantBuffer::filter() const {
  return filter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VariantBuffer::mutable_filter() {
  return &filter_;
}

// repeated .VarMetaBuffer vmeta = 6;
inline int VariantBuffer::vmeta_size() const {
  return vmeta_.size();
}
inline void VariantBuffer::clear_vmeta() {
  vmeta_.Clear();
}
inline const ::VarMetaBuffer& VariantBuffer::vmeta(int index) const {
  return vmeta_.Get(index);
}
inline ::VarMetaBuffer* VariantBuffer::mutable_vmeta(int index) {
  return vmeta_.Mutable(index);
}
inline ::VarMetaBuffer* VariantBuffer::add_vmeta() {
  return vmeta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VarMetaBuffer >&
VariantBuffer::vmeta() const {
  return vmeta_;
}
inline ::google::protobuf::RepeatedPtrField< ::VarMetaBuffer >*
VariantBuffer::mutable_vmeta() {
  return &vmeta_;
}

// repeated int32 geno1 = 7 [packed = true];
inline int VariantBuffer::geno1_size() const {
  return geno1_.size();
}
inline void VariantBuffer::clear_geno1() {
  geno1_.Clear();
}
inline ::google::protobuf::int32 VariantBuffer::geno1(int index) const {
  return geno1_.Get(index);
}
inline void VariantBuffer::set_geno1(int index, ::google::protobuf::int32 value) {
  geno1_.Set(index, value);
}
inline void VariantBuffer::add_geno1(::google::protobuf::int32 value) {
  geno1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VariantBuffer::geno1() const {
  return geno1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VariantBuffer::mutable_geno1() {
  return &geno1_;
}

// repeated int32 geno2 = 8 [packed = true];
inline int VariantBuffer::geno2_size() const {
  return geno2_.size();
}
inline void VariantBuffer::clear_geno2() {
  geno2_.Clear();
}
inline ::google::protobuf::int32 VariantBuffer::geno2(int index) const {
  return geno2_.Get(index);
}
inline void VariantBuffer::set_geno2(int index, ::google::protobuf::int32 value) {
  geno2_.Set(index, value);
}
inline void VariantBuffer::add_geno2(::google::protobuf::int32 value) {
  geno2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VariantBuffer::geno2() const {
  return geno2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VariantBuffer::mutable_geno2() {
  return &geno2_;
}

// repeated .GenotypeMetaBuffer gmeta = 9;
inline int VariantBuffer::gmeta_size() const {
  return gmeta_.size();
}
inline void VariantBuffer::clear_gmeta() {
  gmeta_.Clear();
}
inline const ::GenotypeMetaBuffer& VariantBuffer::gmeta(int index) const {
  return gmeta_.Get(index);
}
inline ::GenotypeMetaBuffer* VariantBuffer::mutable_gmeta(int index) {
  return gmeta_.Mutable(index);
}
inline ::GenotypeMetaBuffer* VariantBuffer::add_gmeta() {
  return gmeta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GenotypeMetaBuffer >&
VariantBuffer::gmeta() const {
  return gmeta_;
}
inline ::google::protobuf::RepeatedPtrField< ::GenotypeMetaBuffer >*
VariantBuffer::mutable_gmeta() {
  return &gmeta_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VarMetaBuffer_Type>() {
  return ::VarMetaBuffer_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GenotypeMetaBuffer_Type>() {
  return ::GenotypeMetaBuffer_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_variant_2eproto__INCLUDED
