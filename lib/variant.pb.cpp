// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "variant.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* VariantMetaUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariantMetaUnit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VariantMetaUnit_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GenotypeMetaUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenotypeMetaUnit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GenotypeMetaUnit_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VariantBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariantBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariantMetaBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariantMetaBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenotypeBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenotypeBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenotypeMetaBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenotypeMetaBuffer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_variant_2eproto() {
  protobuf_AddDesc_variant_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "variant.proto");
  GOOGLE_CHECK(file != NULL);
  VariantMetaUnit_descriptor_ = file->message_type(0);
  static const int VariantMetaUnit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, bool_value_),
  };
  VariantMetaUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VariantMetaUnit_descriptor_,
      VariantMetaUnit::default_instance_,
      VariantMetaUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VariantMetaUnit));
  VariantMetaUnit_Type_descriptor_ = VariantMetaUnit_descriptor_->enum_type(0);
  GenotypeMetaUnit_descriptor_ = file->message_type(1);
  static const int GenotypeMetaUnit_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, fixed_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, fixed_indiv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, indiv_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, missing_index_),
  };
  GenotypeMetaUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenotypeMetaUnit_descriptor_,
      GenotypeMetaUnit::default_instance_,
      GenotypeMetaUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenotypeMetaUnit));
  GenotypeMetaUnit_Type_descriptor_ = GenotypeMetaUnit_descriptor_->enum_type(0);
  VariantBuffer_descriptor_ = file->message_type(2);
  static const int VariantBuffer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantBuffer, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantBuffer, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantBuffer, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantBuffer, filter_),
  };
  VariantBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VariantBuffer_descriptor_,
      VariantBuffer::default_instance_,
      VariantBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VariantBuffer));
  VariantMetaBuffer_descriptor_ = file->message_type(3);
  static const int VariantMetaBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaBuffer, vmeta_),
  };
  VariantMetaBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VariantMetaBuffer_descriptor_,
      VariantMetaBuffer::default_instance_,
      VariantMetaBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariantMetaBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VariantMetaBuffer));
  GenotypeBuffer_descriptor_ = file->message_type(4);
  static const int GenotypeBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeBuffer, geno_),
  };
  GenotypeBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenotypeBuffer_descriptor_,
      GenotypeBuffer::default_instance_,
      GenotypeBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenotypeBuffer));
  GenotypeMetaBuffer_descriptor_ = file->message_type(5);
  static const int GenotypeMetaBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaBuffer, gmeta_),
  };
  GenotypeMetaBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenotypeMetaBuffer_descriptor_,
      GenotypeMetaBuffer::default_instance_,
      GenotypeMetaBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenotypeMetaBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenotypeMetaBuffer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_variant_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VariantMetaUnit_descriptor_, &VariantMetaUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenotypeMetaUnit_descriptor_, &GenotypeMetaUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VariantBuffer_descriptor_, &VariantBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VariantMetaBuffer_descriptor_, &VariantMetaBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenotypeBuffer_descriptor_, &GenotypeBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenotypeMetaBuffer_descriptor_, &GenotypeMetaBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_variant_2eproto() {
  delete VariantMetaUnit::default_instance_;
  delete VariantMetaUnit_reflection_;
  delete GenotypeMetaUnit::default_instance_;
  delete GenotypeMetaUnit_reflection_;
  delete VariantBuffer::default_instance_;
  delete VariantBuffer_reflection_;
  delete VariantMetaBuffer::default_instance_;
  delete VariantMetaBuffer_reflection_;
  delete GenotypeBuffer::default_instance_;
  delete GenotypeBuffer_reflection_;
  delete GenotypeMetaBuffer::default_instance_;
  delete GenotypeMetaBuffer_reflection_;
}

void protobuf_AddDesc_variant_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rvariant.proto\"\323\001\n\017VariantMetaUnit\022#\n\004t"
    "ype\030\001 \002(\0162\025.VariantMetaUnit.Type\022\014\n\004name"
    "\030\002 \002(\t\022\025\n\tint_value\030\003 \003(\005B\002\020\001\022\030\n\014double_"
    "value\030\004 \003(\001B\002\020\001\022\024\n\014string_value\030\005 \003(\t\022\026\n"
    "\nbool_value\030\006 \003(\010B\002\020\001\".\n\004Type\022\007\n\003INT\020\001\022\t"
    "\n\005FLOAT\020\002\022\010\n\004TEXT\020\003\022\010\n\004BOOL\020\004\"\302\002\n\020Genoty"
    "peMetaUnit\022$\n\004type\030\001 \002(\0162\026.GenotypeMetaU"
    "nit.Type\022\014\n\004name\030\002 \002(\t\022\021\n\tfixed_len\030\003 \001("
    "\005\022\017\n\003len\030\004 \003(\005B\002\020\001\022\025\n\tint_value\030\005 \003(\005B\002\020"
    "\001\022\030\n\014double_value\030\006 \003(\001B\002\020\001\022\024\n\014string_va"
    "lue\030\007 \003(\t\022\026\n\nbool_value\030\010 \003(\010B\002\020\001\022\023\n\013fix"
    "ed_indiv\030\t \001(\005\022\027\n\013indiv_index\030\n \003(\005B\002\020\001\022"
    "\031\n\rmissing_index\030\013 \003(\005B\002\020\001\".\n\004Type\022\007\n\003IN"
    "T\020\001\022\t\n\005FLOAT\020\002\022\010\n\004TEXT\020\003\022\010\n\004BOOL\020\004\"J\n\rVa"
    "riantBuffer\022\013\n\003ref\030\001 \001(\t\022\013\n\003alt\030\002 \001(\t\022\017\n"
    "\007quality\030\003 \001(\001\022\016\n\006filter\030\004 \003(\t\"4\n\021Varian"
    "tMetaBuffer\022\037\n\005vmeta\030\001 \003(\0132\020.VariantMeta"
    "Unit\"\"\n\016GenotypeBuffer\022\020\n\004geno\030\001 \003(\rB\002\020\001"
    "\"6\n\022GenotypeMetaBuffer\022 \n\005gmeta\030\001 \003(\0132\021."
    "GenotypeMetaUnit", 776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "variant.proto", &protobuf_RegisterTypes);
  VariantMetaUnit::default_instance_ = new VariantMetaUnit();
  GenotypeMetaUnit::default_instance_ = new GenotypeMetaUnit();
  VariantBuffer::default_instance_ = new VariantBuffer();
  VariantMetaBuffer::default_instance_ = new VariantMetaBuffer();
  GenotypeBuffer::default_instance_ = new GenotypeBuffer();
  GenotypeMetaBuffer::default_instance_ = new GenotypeMetaBuffer();
  VariantMetaUnit::default_instance_->InitAsDefaultInstance();
  GenotypeMetaUnit::default_instance_->InitAsDefaultInstance();
  VariantBuffer::default_instance_->InitAsDefaultInstance();
  VariantMetaBuffer::default_instance_->InitAsDefaultInstance();
  GenotypeBuffer::default_instance_->InitAsDefaultInstance();
  GenotypeMetaBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_variant_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_variant_2eproto {
  StaticDescriptorInitializer_variant_2eproto() {
    protobuf_AddDesc_variant_2eproto();
  }
} static_descriptor_initializer_variant_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* VariantMetaUnit_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantMetaUnit_Type_descriptor_;
}
bool VariantMetaUnit_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VariantMetaUnit_Type VariantMetaUnit::INT;
const VariantMetaUnit_Type VariantMetaUnit::FLOAT;
const VariantMetaUnit_Type VariantMetaUnit::TEXT;
const VariantMetaUnit_Type VariantMetaUnit::BOOL;
const VariantMetaUnit_Type VariantMetaUnit::Type_MIN;
const VariantMetaUnit_Type VariantMetaUnit::Type_MAX;
const int VariantMetaUnit::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string VariantMetaUnit::_default_name_;
#ifndef _MSC_VER
const int VariantMetaUnit::kTypeFieldNumber;
const int VariantMetaUnit::kNameFieldNumber;
const int VariantMetaUnit::kIntValueFieldNumber;
const int VariantMetaUnit::kDoubleValueFieldNumber;
const int VariantMetaUnit::kStringValueFieldNumber;
const int VariantMetaUnit::kBoolValueFieldNumber;
#endif  // !_MSC_VER

VariantMetaUnit::VariantMetaUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VariantMetaUnit::InitAsDefaultInstance() {
}

VariantMetaUnit::VariantMetaUnit(const VariantMetaUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VariantMetaUnit::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariantMetaUnit::~VariantMetaUnit() {
  SharedDtor();
}

void VariantMetaUnit::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VariantMetaUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantMetaUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantMetaUnit_descriptor_;
}

const VariantMetaUnit& VariantMetaUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_variant_2eproto();  return *default_instance_;
}

VariantMetaUnit* VariantMetaUnit::default_instance_ = NULL;

VariantMetaUnit* VariantMetaUnit::New() const {
  return new VariantMetaUnit;
}

void VariantMetaUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  int_value_.Clear();
  double_value_.Clear();
  string_value_.Clear();
  bool_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VariantMetaUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VariantMetaUnit.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VariantMetaUnit_Type_IsValid(value)) {
            set_type(static_cast< ::VariantMetaUnit_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_int_value;
        break;
      }
      
      // repeated int32 int_value = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_int_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_double_value;
        break;
      }
      
      // repeated double double_value = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_double_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }
      
      // repeated string string_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value(0).data(), this->string_value(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        if (input->ExpectTag(50)) goto parse_bool_value;
        break;
      }
      
      // repeated bool bool_value = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bool_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 50, input, this->mutable_bool_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariantMetaUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .VariantMetaUnit.Type type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated int32 int_value = 3 [packed = true];
  if (this->int_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int_value_cached_byte_size_);
  }
  for (int i = 0; i < this->int_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int_value(i), output);
  }
  
  // repeated double double_value = 4 [packed = true];
  if (this->double_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_value_cached_byte_size_);
  }
  for (int i = 0; i < this->double_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_value(i), output);
  }
  
  // repeated string string_value = 5;
  for (int i = 0; i < this->string_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->string_value(i).data(), this->string_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->string_value(i), output);
  }
  
  // repeated bool bool_value = 6 [packed = true];
  if (this->bool_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bool_value_cached_byte_size_);
  }
  for (int i = 0; i < this->bool_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->bool_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VariantMetaUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .VariantMetaUnit.Type type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated int32 int_value = 3 [packed = true];
  if (this->int_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int_value(i), target);
  }
  
  // repeated double double_value = 4 [packed = true];
  if (this->double_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_value(i), target);
  }
  
  // repeated string string_value = 5;
  for (int i = 0; i < this->string_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value(i).data(), this->string_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->string_value(i), target);
  }
  
  // repeated bool bool_value = 6 [packed = true];
  if (this->bool_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bool_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bool_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->bool_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VariantMetaUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VariantMetaUnit.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated int32 int_value = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->int_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int_value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _int_value_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated double double_value = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _double_value_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated string string_value = 5;
  total_size += 1 * this->string_value_size();
  for (int i = 0; i < this->string_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_value(i));
  }
  
  // repeated bool bool_value = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->bool_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _bool_value_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantMetaUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VariantMetaUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VariantMetaUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VariantMetaUnit::MergeFrom(const VariantMetaUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_value_.MergeFrom(from.int_value_);
  double_value_.MergeFrom(from.double_value_);
  string_value_.MergeFrom(from.string_value_);
  bool_value_.MergeFrom(from.bool_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VariantMetaUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantMetaUnit::CopyFrom(const VariantMetaUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantMetaUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void VariantMetaUnit::Swap(VariantMetaUnit* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    int_value_.Swap(&other->int_value_);
    double_value_.Swap(&other->double_value_);
    string_value_.Swap(&other->string_value_);
    bool_value_.Swap(&other->bool_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VariantMetaUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariantMetaUnit_descriptor_;
  metadata.reflection = VariantMetaUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GenotypeMetaUnit_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenotypeMetaUnit_Type_descriptor_;
}
bool GenotypeMetaUnit_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GenotypeMetaUnit_Type GenotypeMetaUnit::INT;
const GenotypeMetaUnit_Type GenotypeMetaUnit::FLOAT;
const GenotypeMetaUnit_Type GenotypeMetaUnit::TEXT;
const GenotypeMetaUnit_Type GenotypeMetaUnit::BOOL;
const GenotypeMetaUnit_Type GenotypeMetaUnit::Type_MIN;
const GenotypeMetaUnit_Type GenotypeMetaUnit::Type_MAX;
const int GenotypeMetaUnit::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string GenotypeMetaUnit::_default_name_;
#ifndef _MSC_VER
const int GenotypeMetaUnit::kTypeFieldNumber;
const int GenotypeMetaUnit::kNameFieldNumber;
const int GenotypeMetaUnit::kFixedLenFieldNumber;
const int GenotypeMetaUnit::kLenFieldNumber;
const int GenotypeMetaUnit::kIntValueFieldNumber;
const int GenotypeMetaUnit::kDoubleValueFieldNumber;
const int GenotypeMetaUnit::kStringValueFieldNumber;
const int GenotypeMetaUnit::kBoolValueFieldNumber;
const int GenotypeMetaUnit::kFixedIndivFieldNumber;
const int GenotypeMetaUnit::kIndivIndexFieldNumber;
const int GenotypeMetaUnit::kMissingIndexFieldNumber;
#endif  // !_MSC_VER

GenotypeMetaUnit::GenotypeMetaUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenotypeMetaUnit::InitAsDefaultInstance() {
}

GenotypeMetaUnit::GenotypeMetaUnit(const GenotypeMetaUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenotypeMetaUnit::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&_default_name_);
  fixed_len_ = 0;
  fixed_indiv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenotypeMetaUnit::~GenotypeMetaUnit() {
  SharedDtor();
}

void GenotypeMetaUnit::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GenotypeMetaUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenotypeMetaUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenotypeMetaUnit_descriptor_;
}

const GenotypeMetaUnit& GenotypeMetaUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_variant_2eproto();  return *default_instance_;
}

GenotypeMetaUnit* GenotypeMetaUnit::default_instance_ = NULL;

GenotypeMetaUnit* GenotypeMetaUnit::New() const {
  return new GenotypeMetaUnit;
}

void GenotypeMetaUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    fixed_len_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fixed_indiv_ = 0;
  }
  len_.Clear();
  int_value_.Clear();
  double_value_.Clear();
  string_value_.Clear();
  bool_value_.Clear();
  indiv_index_.Clear();
  missing_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenotypeMetaUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GenotypeMetaUnit.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GenotypeMetaUnit_Type_IsValid(value)) {
            set_type(static_cast< ::GenotypeMetaUnit_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fixed_len;
        break;
      }
      
      // optional int32 fixed_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixed_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixed_len_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_len;
        break;
      }
      
      // repeated int32 len = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_len())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_len())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_int_value;
        break;
      }
      
      // repeated int32 int_value = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_int_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_double_value;
        break;
      }
      
      // repeated double double_value = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_double_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_string_value;
        break;
      }
      
      // repeated string string_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value(0).data(), this->string_value(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_string_value;
        if (input->ExpectTag(66)) goto parse_bool_value;
        break;
      }
      
      // repeated bool bool_value = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bool_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 66, input, this->mutable_bool_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fixed_indiv;
        break;
      }
      
      // optional int32 fixed_indiv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixed_indiv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixed_indiv_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_indiv_index;
        break;
      }
      
      // repeated int32 indiv_index = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indiv_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indiv_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82, input, this->mutable_indiv_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_missing_index;
        break;
      }
      
      // repeated int32 missing_index = 11 [packed = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missing_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_missing_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90, input, this->mutable_missing_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenotypeMetaUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GenotypeMetaUnit.Type type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 fixed_len = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixed_len(), output);
  }
  
  // repeated int32 len = 4 [packed = true];
  if (this->len_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_len_cached_byte_size_);
  }
  for (int i = 0; i < this->len_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->len(i), output);
  }
  
  // repeated int32 int_value = 5 [packed = true];
  if (this->int_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int_value_cached_byte_size_);
  }
  for (int i = 0; i < this->int_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int_value(i), output);
  }
  
  // repeated double double_value = 6 [packed = true];
  if (this->double_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_value_cached_byte_size_);
  }
  for (int i = 0; i < this->double_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_value(i), output);
  }
  
  // repeated string string_value = 7;
  for (int i = 0; i < this->string_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->string_value(i).data(), this->string_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->string_value(i), output);
  }
  
  // repeated bool bool_value = 8 [packed = true];
  if (this->bool_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bool_value_cached_byte_size_);
  }
  for (int i = 0; i < this->bool_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->bool_value(i), output);
  }
  
  // optional int32 fixed_indiv = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fixed_indiv(), output);
  }
  
  // repeated int32 indiv_index = 10 [packed = true];
  if (this->indiv_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_indiv_index_cached_byte_size_);
  }
  for (int i = 0; i < this->indiv_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->indiv_index(i), output);
  }
  
  // repeated int32 missing_index = 11 [packed = true];
  if (this->missing_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_missing_index_cached_byte_size_);
  }
  for (int i = 0; i < this->missing_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->missing_index(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenotypeMetaUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GenotypeMetaUnit.Type type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 fixed_len = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixed_len(), target);
  }
  
  // repeated int32 len = 4 [packed = true];
  if (this->len_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _len_cached_byte_size_, target);
  }
  for (int i = 0; i < this->len_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->len(i), target);
  }
  
  // repeated int32 int_value = 5 [packed = true];
  if (this->int_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int_value(i), target);
  }
  
  // repeated double double_value = 6 [packed = true];
  if (this->double_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_value(i), target);
  }
  
  // repeated string string_value = 7;
  for (int i = 0; i < this->string_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value(i).data(), this->string_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->string_value(i), target);
  }
  
  // repeated bool bool_value = 8 [packed = true];
  if (this->bool_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bool_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bool_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->bool_value(i), target);
  }
  
  // optional int32 fixed_indiv = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fixed_indiv(), target);
  }
  
  // repeated int32 indiv_index = 10 [packed = true];
  if (this->indiv_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _indiv_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->indiv_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->indiv_index(i), target);
  }
  
  // repeated int32 missing_index = 11 [packed = true];
  if (this->missing_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _missing_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->missing_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->missing_index(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenotypeMetaUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GenotypeMetaUnit.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 fixed_len = 3;
    if (has_fixed_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixed_len());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fixed_indiv = 9;
    if (has_fixed_indiv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixed_indiv());
    }
    
  }
  // repeated int32 len = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->len_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->len(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _len_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int32 int_value = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->int_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int_value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _int_value_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated double double_value = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _double_value_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated string string_value = 7;
  total_size += 1 * this->string_value_size();
  for (int i = 0; i < this->string_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_value(i));
  }
  
  // repeated bool bool_value = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->bool_value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _bool_value_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int32 indiv_index = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->indiv_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indiv_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _indiv_index_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int32 missing_index = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->missing_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->missing_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _missing_index_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenotypeMetaUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenotypeMetaUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenotypeMetaUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenotypeMetaUnit::MergeFrom(const GenotypeMetaUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  len_.MergeFrom(from.len_);
  int_value_.MergeFrom(from.int_value_);
  double_value_.MergeFrom(from.double_value_);
  string_value_.MergeFrom(from.string_value_);
  bool_value_.MergeFrom(from.bool_value_);
  indiv_index_.MergeFrom(from.indiv_index_);
  missing_index_.MergeFrom(from.missing_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_fixed_len(from.fixed_len());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_fixed_indiv(from.fixed_indiv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenotypeMetaUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenotypeMetaUnit::CopyFrom(const GenotypeMetaUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenotypeMetaUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GenotypeMetaUnit::Swap(GenotypeMetaUnit* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(fixed_len_, other->fixed_len_);
    len_.Swap(&other->len_);
    int_value_.Swap(&other->int_value_);
    double_value_.Swap(&other->double_value_);
    string_value_.Swap(&other->string_value_);
    bool_value_.Swap(&other->bool_value_);
    std::swap(fixed_indiv_, other->fixed_indiv_);
    indiv_index_.Swap(&other->indiv_index_);
    missing_index_.Swap(&other->missing_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenotypeMetaUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenotypeMetaUnit_descriptor_;
  metadata.reflection = GenotypeMetaUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string VariantBuffer::_default_ref_;
const ::std::string VariantBuffer::_default_alt_;
#ifndef _MSC_VER
const int VariantBuffer::kRefFieldNumber;
const int VariantBuffer::kAltFieldNumber;
const int VariantBuffer::kQualityFieldNumber;
const int VariantBuffer::kFilterFieldNumber;
#endif  // !_MSC_VER

VariantBuffer::VariantBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VariantBuffer::InitAsDefaultInstance() {
}

VariantBuffer::VariantBuffer(const VariantBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VariantBuffer::SharedCtor() {
  _cached_size_ = 0;
  ref_ = const_cast< ::std::string*>(&_default_ref_);
  alt_ = const_cast< ::std::string*>(&_default_alt_);
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariantBuffer::~VariantBuffer() {
  SharedDtor();
}

void VariantBuffer::SharedDtor() {
  if (ref_ != &_default_ref_) {
    delete ref_;
  }
  if (alt_ != &_default_alt_) {
    delete alt_;
  }
  if (this != default_instance_) {
  }
}

void VariantBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantBuffer_descriptor_;
}

const VariantBuffer& VariantBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_variant_2eproto();  return *default_instance_;
}

VariantBuffer* VariantBuffer::default_instance_ = NULL;

VariantBuffer* VariantBuffer::New() const {
  return new VariantBuffer;
}

void VariantBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ref_ != &_default_ref_) {
        ref_->clear();
      }
    }
    if (_has_bit(1)) {
      if (alt_ != &_default_alt_) {
        alt_->clear();
      }
    }
    quality_ = 0;
  }
  filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VariantBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ref = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alt;
        break;
      }
      
      // optional string alt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alt().data(), this->alt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_quality;
        break;
      }
      
      // optional double quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filter;
        break;
      }
      
      // repeated string filter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter(0).data(), this->filter(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariantBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ref = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ref(), output);
  }
  
  // optional string alt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alt().data(), this->alt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alt(), output);
  }
  
  // optional double quality = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->quality(), output);
  }
  
  // repeated string filter = 4;
  for (int i = 0; i < this->filter_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->filter(i).data(), this->filter(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VariantBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ref = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ref(), target);
  }
  
  // optional string alt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alt().data(), this->alt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alt(), target);
  }
  
  // optional double quality = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->quality(), target);
  }
  
  // repeated string filter = 4;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter(i).data(), this->filter(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->filter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VariantBuffer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ref = 1;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }
    
    // optional string alt = 2;
    if (has_alt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alt());
    }
    
    // optional double quality = 3;
    if (has_quality()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated string filter = 4;
  total_size += 1 * this->filter_size();
  for (int i = 0; i < this->filter_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VariantBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VariantBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VariantBuffer::MergeFrom(const VariantBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  filter_.MergeFrom(from.filter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ref(from.ref());
    }
    if (from._has_bit(1)) {
      set_alt(from.alt());
    }
    if (from._has_bit(2)) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VariantBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantBuffer::CopyFrom(const VariantBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantBuffer::IsInitialized() const {
  
  return true;
}

void VariantBuffer::Swap(VariantBuffer* other) {
  if (other != this) {
    std::swap(ref_, other->ref_);
    std::swap(alt_, other->alt_);
    std::swap(quality_, other->quality_);
    filter_.Swap(&other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VariantBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariantBuffer_descriptor_;
  metadata.reflection = VariantBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VariantMetaBuffer::kVmetaFieldNumber;
#endif  // !_MSC_VER

VariantMetaBuffer::VariantMetaBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VariantMetaBuffer::InitAsDefaultInstance() {
}

VariantMetaBuffer::VariantMetaBuffer(const VariantMetaBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VariantMetaBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariantMetaBuffer::~VariantMetaBuffer() {
  SharedDtor();
}

void VariantMetaBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VariantMetaBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantMetaBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariantMetaBuffer_descriptor_;
}

const VariantMetaBuffer& VariantMetaBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_variant_2eproto();  return *default_instance_;
}

VariantMetaBuffer* VariantMetaBuffer::default_instance_ = NULL;

VariantMetaBuffer* VariantMetaBuffer::New() const {
  return new VariantMetaBuffer;
}

void VariantMetaBuffer::Clear() {
  vmeta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VariantMetaBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VariantMetaUnit vmeta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vmeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vmeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vmeta;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariantMetaBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .VariantMetaUnit vmeta = 1;
  for (int i = 0; i < this->vmeta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vmeta(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VariantMetaBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .VariantMetaUnit vmeta = 1;
  for (int i = 0; i < this->vmeta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vmeta(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VariantMetaBuffer::ByteSize() const {
  int total_size = 0;
  
  // repeated .VariantMetaUnit vmeta = 1;
  total_size += 1 * this->vmeta_size();
  for (int i = 0; i < this->vmeta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vmeta(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantMetaBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VariantMetaBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VariantMetaBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VariantMetaBuffer::MergeFrom(const VariantMetaBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  vmeta_.MergeFrom(from.vmeta_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VariantMetaBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantMetaBuffer::CopyFrom(const VariantMetaBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantMetaBuffer::IsInitialized() const {
  
  for (int i = 0; i < vmeta_size(); i++) {
    if (!this->vmeta(i).IsInitialized()) return false;
  }
  return true;
}

void VariantMetaBuffer::Swap(VariantMetaBuffer* other) {
  if (other != this) {
    vmeta_.Swap(&other->vmeta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VariantMetaBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariantMetaBuffer_descriptor_;
  metadata.reflection = VariantMetaBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenotypeBuffer::kGenoFieldNumber;
#endif  // !_MSC_VER

GenotypeBuffer::GenotypeBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenotypeBuffer::InitAsDefaultInstance() {
}

GenotypeBuffer::GenotypeBuffer(const GenotypeBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenotypeBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenotypeBuffer::~GenotypeBuffer() {
  SharedDtor();
}

void GenotypeBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenotypeBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenotypeBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenotypeBuffer_descriptor_;
}

const GenotypeBuffer& GenotypeBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_variant_2eproto();  return *default_instance_;
}

GenotypeBuffer* GenotypeBuffer::default_instance_ = NULL;

GenotypeBuffer* GenotypeBuffer::New() const {
  return new GenotypeBuffer;
}

void GenotypeBuffer::Clear() {
  geno_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenotypeBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 geno = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_geno())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_geno())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenotypeBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 geno = 1 [packed = true];
  if (this->geno_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_geno_cached_byte_size_);
  }
  for (int i = 0; i < this->geno_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->geno(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenotypeBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 geno = 1 [packed = true];
  if (this->geno_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _geno_cached_byte_size_, target);
  }
  for (int i = 0; i < this->geno_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->geno(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenotypeBuffer::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 geno = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->geno_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->geno(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _geno_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenotypeBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenotypeBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenotypeBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenotypeBuffer::MergeFrom(const GenotypeBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  geno_.MergeFrom(from.geno_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenotypeBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenotypeBuffer::CopyFrom(const GenotypeBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenotypeBuffer::IsInitialized() const {
  
  return true;
}

void GenotypeBuffer::Swap(GenotypeBuffer* other) {
  if (other != this) {
    geno_.Swap(&other->geno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenotypeBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenotypeBuffer_descriptor_;
  metadata.reflection = GenotypeBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenotypeMetaBuffer::kGmetaFieldNumber;
#endif  // !_MSC_VER

GenotypeMetaBuffer::GenotypeMetaBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenotypeMetaBuffer::InitAsDefaultInstance() {
}

GenotypeMetaBuffer::GenotypeMetaBuffer(const GenotypeMetaBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenotypeMetaBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenotypeMetaBuffer::~GenotypeMetaBuffer() {
  SharedDtor();
}

void GenotypeMetaBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenotypeMetaBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenotypeMetaBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenotypeMetaBuffer_descriptor_;
}

const GenotypeMetaBuffer& GenotypeMetaBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_variant_2eproto();  return *default_instance_;
}

GenotypeMetaBuffer* GenotypeMetaBuffer::default_instance_ = NULL;

GenotypeMetaBuffer* GenotypeMetaBuffer::New() const {
  return new GenotypeMetaBuffer;
}

void GenotypeMetaBuffer::Clear() {
  gmeta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenotypeMetaBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GenotypeMetaUnit gmeta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gmeta;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenotypeMetaBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GenotypeMetaUnit gmeta = 1;
  for (int i = 0; i < this->gmeta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmeta(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenotypeMetaBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GenotypeMetaUnit gmeta = 1;
  for (int i = 0; i < this->gmeta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmeta(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenotypeMetaBuffer::ByteSize() const {
  int total_size = 0;
  
  // repeated .GenotypeMetaUnit gmeta = 1;
  total_size += 1 * this->gmeta_size();
  for (int i = 0; i < this->gmeta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmeta(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenotypeMetaBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenotypeMetaBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenotypeMetaBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenotypeMetaBuffer::MergeFrom(const GenotypeMetaBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmeta_.MergeFrom(from.gmeta_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenotypeMetaBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenotypeMetaBuffer::CopyFrom(const GenotypeMetaBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenotypeMetaBuffer::IsInitialized() const {
  
  for (int i = 0; i < gmeta_size(); i++) {
    if (!this->gmeta(i).IsInitialized()) return false;
  }
  return true;
}

void GenotypeMetaBuffer::Swap(GenotypeMetaBuffer* other) {
  if (other != this) {
    gmeta_.Swap(&other->gmeta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenotypeMetaBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenotypeMetaBuffer_descriptor_;
  metadata.reflection = GenotypeMetaBuffer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
