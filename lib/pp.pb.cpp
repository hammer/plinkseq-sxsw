// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PolyPhen2Buffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolyPhen2Buffer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PolyPhen2Buffer_pred_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pp_2eproto() {
  protobuf_AddDesc_pp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pp.proto");
  GOOGLE_CHECK(file != NULL);
  PolyPhen2Buffer_descriptor_ = file->message_type(0);
  static const int PolyPhen2Buffer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, transcript_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, protein_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, alternate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, prediction_),
  };
  PolyPhen2Buffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PolyPhen2Buffer_descriptor_,
      PolyPhen2Buffer::default_instance_,
      PolyPhen2Buffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyPhen2Buffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PolyPhen2Buffer));
  PolyPhen2Buffer_pred_t_descriptor_ = PolyPhen2Buffer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PolyPhen2Buffer_descriptor_, &PolyPhen2Buffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pp_2eproto() {
  delete PolyPhen2Buffer::default_instance_;
  delete PolyPhen2Buffer_reflection_;
}

void protobuf_AddDesc_pp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010pp.proto\"\367\001\n\017PolyPhen2Buffer\022\027\n\017transc"
    "ript_name\030\001 \002(\t\022\024\n\014protein_name\030\002 \002(\t\022\024\n"
    "\010position\030\003 \003(\005B\002\020\001\022\021\n\treference\030\004 \003(\t\022\021"
    "\n\talternate\030\005 \003(\t\022\021\n\005score\030\006 \003(\001B\002\020\001\022/\n\n"
    "prediction\030\007 \003(\0162\027.PolyPhen2Buffer.pred_"
    "tB\002\020\001\"5\n\006pred_t\022\013\n\007UNKNOWN\020\000\022\n\n\006BENIGN\020\001"
    "\022\010\n\004POSS\020\002\022\010\n\004PROB\020\003", 260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pp.proto", &protobuf_RegisterTypes);
  PolyPhen2Buffer::default_instance_ = new PolyPhen2Buffer();
  PolyPhen2Buffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pp_2eproto {
  StaticDescriptorInitializer_pp_2eproto() {
    protobuf_AddDesc_pp_2eproto();
  }
} static_descriptor_initializer_pp_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PolyPhen2Buffer_pred_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolyPhen2Buffer_pred_t_descriptor_;
}
bool PolyPhen2Buffer_pred_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PolyPhen2Buffer_pred_t PolyPhen2Buffer::UNKNOWN;
const PolyPhen2Buffer_pred_t PolyPhen2Buffer::BENIGN;
const PolyPhen2Buffer_pred_t PolyPhen2Buffer::POSS;
const PolyPhen2Buffer_pred_t PolyPhen2Buffer::PROB;
const PolyPhen2Buffer_pred_t PolyPhen2Buffer::pred_t_MIN;
const PolyPhen2Buffer_pred_t PolyPhen2Buffer::pred_t_MAX;
const int PolyPhen2Buffer::pred_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PolyPhen2Buffer::kTranscriptNameFieldNumber;
const int PolyPhen2Buffer::kProteinNameFieldNumber;
const int PolyPhen2Buffer::kPositionFieldNumber;
const int PolyPhen2Buffer::kReferenceFieldNumber;
const int PolyPhen2Buffer::kAlternateFieldNumber;
const int PolyPhen2Buffer::kScoreFieldNumber;
const int PolyPhen2Buffer::kPredictionFieldNumber;
#endif  // !_MSC_VER

PolyPhen2Buffer::PolyPhen2Buffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PolyPhen2Buffer::InitAsDefaultInstance() {
}

PolyPhen2Buffer::PolyPhen2Buffer(const PolyPhen2Buffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PolyPhen2Buffer::SharedCtor() {
  _cached_size_ = 0;
  transcript_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protein_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolyPhen2Buffer::~PolyPhen2Buffer() {
  SharedDtor();
}

void PolyPhen2Buffer::SharedDtor() {
  if (transcript_name_ != &::google::protobuf::internal::kEmptyString) {
    delete transcript_name_;
  }
  if (protein_name_ != &::google::protobuf::internal::kEmptyString) {
    delete protein_name_;
  }
  if (this != default_instance_) {
  }
}

void PolyPhen2Buffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolyPhen2Buffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolyPhen2Buffer_descriptor_;
}

const PolyPhen2Buffer& PolyPhen2Buffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pp_2eproto();  return *default_instance_;
}

PolyPhen2Buffer* PolyPhen2Buffer::default_instance_ = NULL;

PolyPhen2Buffer* PolyPhen2Buffer::New() const {
  return new PolyPhen2Buffer;
}

void PolyPhen2Buffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transcript_name()) {
      if (transcript_name_ != &::google::protobuf::internal::kEmptyString) {
        transcript_name_->clear();
      }
    }
    if (has_protein_name()) {
      if (protein_name_ != &::google::protobuf::internal::kEmptyString) {
        protein_name_->clear();
      }
    }
  }
  position_.Clear();
  reference_.Clear();
  alternate_.Clear();
  score_.Clear();
  prediction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PolyPhen2Buffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string transcript_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transcript_name().data(), this->transcript_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_protein_name;
        break;
      }
      
      // required string protein_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protein_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protein_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protein_name().data(), this->protein_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // repeated int32 position = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reference;
        break;
      }
      
      // repeated string reference = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reference(0).data(), this->reference(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reference;
        if (input->ExpectTag(42)) goto parse_alternate;
        break;
      }
      
      // repeated string alternate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alternate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alternate(0).data(), this->alternate(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alternate;
        if (input->ExpectTag(50)) goto parse_score;
        break;
      }
      
      // repeated double score = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prediction;
        break;
      }
      
      // repeated .PolyPhen2Buffer.pred_t prediction = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prediction:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::PolyPhen2Buffer_pred_t_IsValid(value)) {
              add_prediction(static_cast< ::PolyPhen2Buffer_pred_t >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PolyPhen2Buffer_pred_t_IsValid(value)) {
            add_prediction(static_cast< ::PolyPhen2Buffer_pred_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PolyPhen2Buffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string transcript_name = 1;
  if (has_transcript_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transcript_name().data(), this->transcript_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->transcript_name(), output);
  }
  
  // required string protein_name = 2;
  if (has_protein_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protein_name().data(), this->protein_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->protein_name(), output);
  }
  
  // repeated int32 position = 3 [packed = true];
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->position(i), output);
  }
  
  // repeated string reference = 4;
  for (int i = 0; i < this->reference_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->reference(i).data(), this->reference(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reference(i), output);
  }
  
  // repeated string alternate = 5;
  for (int i = 0; i < this->alternate_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->alternate(i).data(), this->alternate(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->alternate(i), output);
  }
  
  // repeated double score = 6 [packed = true];
  if (this->score_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_score_cached_byte_size_);
  }
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->score(i), output);
  }
  
  // repeated .PolyPhen2Buffer.pred_t prediction = 7 [packed = true];
  if (this->prediction_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_prediction_cached_byte_size_);
  }
  for (int i = 0; i < this->prediction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->prediction(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PolyPhen2Buffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string transcript_name = 1;
  if (has_transcript_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transcript_name().data(), this->transcript_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript_name(), target);
  }
  
  // required string protein_name = 2;
  if (has_protein_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protein_name().data(), this->protein_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protein_name(), target);
  }
  
  // repeated int32 position = 3 [packed = true];
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->position(i), target);
  }
  
  // repeated string reference = 4;
  for (int i = 0; i < this->reference_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reference(i).data(), this->reference(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->reference(i), target);
  }
  
  // repeated string alternate = 5;
  for (int i = 0; i < this->alternate_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alternate(i).data(), this->alternate(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->alternate(i), target);
  }
  
  // repeated double score = 6 [packed = true];
  if (this->score_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _score_cached_byte_size_, target);
  }
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->score(i), target);
  }
  
  // repeated .PolyPhen2Buffer.pred_t prediction = 7 [packed = true];
  if (this->prediction_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _prediction_cached_byte_size_, target);
  }
  for (int i = 0; i < this->prediction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->prediction(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PolyPhen2Buffer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string transcript_name = 1;
    if (has_transcript_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transcript_name());
    }
    
    // required string protein_name = 2;
    if (has_protein_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protein_name());
    }
    
  }
  // repeated int32 position = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->position_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->position(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _position_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated string reference = 4;
  total_size += 1 * this->reference_size();
  for (int i = 0; i < this->reference_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference(i));
  }
  
  // repeated string alternate = 5;
  total_size += 1 * this->alternate_size();
  for (int i = 0; i < this->alternate_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternate(i));
  }
  
  // repeated double score = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->score_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _score_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .PolyPhen2Buffer.pred_t prediction = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->prediction_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->prediction(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _prediction_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolyPhen2Buffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PolyPhen2Buffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PolyPhen2Buffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolyPhen2Buffer::MergeFrom(const PolyPhen2Buffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  reference_.MergeFrom(from.reference_);
  alternate_.MergeFrom(from.alternate_);
  score_.MergeFrom(from.score_);
  prediction_.MergeFrom(from.prediction_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transcript_name()) {
      set_transcript_name(from.transcript_name());
    }
    if (from.has_protein_name()) {
      set_protein_name(from.protein_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PolyPhen2Buffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolyPhen2Buffer::CopyFrom(const PolyPhen2Buffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyPhen2Buffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PolyPhen2Buffer::Swap(PolyPhen2Buffer* other) {
  if (other != this) {
    std::swap(transcript_name_, other->transcript_name_);
    std::swap(protein_name_, other->protein_name_);
    position_.Swap(&other->position_);
    reference_.Swap(&other->reference_);
    alternate_.Swap(&other->alternate_);
    score_.Swap(&other->score_);
    prediction_.Swap(&other->prediction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PolyPhen2Buffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolyPhen2Buffer_descriptor_;
  metadata.reflection = PolyPhen2Buffer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
